// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef rakarrack_h
#define rakarrack_h
#include <FL/Fl.H>
#include "global.h"
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Tooltip.H>
#include <FL/x.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Tiled_Image.H>
#include <FL/Fl_Help_Dialog.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Color_Chooser.H>

class Analyzer : public Fl_Box {
public:
  Analyzer(int x,int y, int w, int h, const char *label=0);
  void init(float *smpsl, float *smpsr, int PERIOD, int SAMPLERATE);
  void draw();
  int handle(int event);
private:
  EQ *efx_EQ1; 
};

class Scope : public Fl_Box {
public:
  Scope(int x,int y, int w, int h, const char *label=0);
  void init(float *smpsl, float *smpsr, int PERIOD);
  void draw();
  int handle(int event);
private:
  EQ *efx_EQ1; 
};

class NewVum : public Fl_Slider {
public:
  NewVum(int x,int y, int w, int h, const char *label=0);
  void draw_bg(int X, int Y, int W, int H);
  void draw_rest(int X, int Y, int W, int H);
  void draw();
  int handle(int event);
};

class TunerLed : public Fl_Slider {
public:
  TunerLed(int x,int y, int w, int h, const char *label=0);
  void draw_bg(int X, int Y, int W, int H);
  void draw_rest(int X, int Y, int W, int H);
  void draw();
  int handle(int event);
};

class SliderW : public Fl_Value_Slider {
public:
  SliderW(int x,int y, int w, int h, const char *label=0);
  int handle(int event);
  int handle2(int event, int X, int Y, int W, int H);
  void draw();
};
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Scroll.H>

class RKRGUI {
  RKR *rkr; 
  int made; 
  Fl_Help_Dialog *visor; 
  struct list_element *mBankNameList;
  struct list_element *mBankNameListTail;
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *Principal;
private:
  void cb_Principal_i(Fl_Double_Window*, void*);
  static void cb_Principal(Fl_Double_Window*, void*);
public:
  Fl_Box *fondo;
  Fl_Menu_Bar *MenuP;
  static Fl_Menu_Item menu_MenuP[];
  static Fl_Menu_Item *Archivo;
  static Fl_Menu_Item *Menu_New;
private:
  void cb_Menu_New_i(Fl_Menu_*, void*);
  static void cb_Menu_New(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Preset;
private:
  void cb_Load_Preset_i(Fl_Menu_*, void*);
  static void cb_Load_Preset(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Preset;
private:
  void cb_Save_Preset_i(Fl_Menu_*, void*);
  static void cb_Save_Preset(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Bank_M;
private:
  void cb_Load_Bank_M_i(Fl_Menu_*, void*);
  static void cb_Load_Bank_M(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Bank_M;
private:
  void cb_Save_Bank_M_i(Fl_Menu_*, void*);
  static void cb_Save_Bank_M(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Skin;
private:
  void cb_Load_Skin_i(Fl_Menu_*, void*);
  static void cb_Load_Skin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Skin;
private:
  void cb_Save_Skin_i(Fl_Menu_*, void*);
  static void cb_Save_Skin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_MTable;
private:
  void cb_Load_MTable_i(Fl_Menu_*, void*);
  static void cb_Load_MTable(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_MTable;
private:
  void cb_Save_MTable_i(Fl_Menu_*, void*);
  static void cb_Save_MTable(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ConvertReverb;
private:
  void cb_ConvertReverb_i(Fl_Menu_*, void*);
  static void cb_ConvertReverb(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ImportPresets;
private:
  void cb_ImportPresets_i(Fl_Menu_*, void*);
  static void cb_ImportPresets(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *salir;
private:
  void cb_salir_i(Fl_Menu_*, void*);
  static void cb_salir(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Bank_Menu;
private:
  void cb_Bank_Menu_i(Fl_Menu_*, void*);
  static void cb_Bank_Menu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Ajustes;
private:
  void cb_Ajustes_i(Fl_Menu_*, void*);
  static void cb_Ajustes(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ML_Menu;
private:
  void cb_ML_Menu_i(Fl_Menu_*, void*);
  static void cb_ML_Menu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ACI_Menu;
private:
  void cb_ACI_Menu_i(Fl_Menu_*, void*);
  static void cb_ACI_Menu(Fl_Menu_*, void*);
  void cb_Fullscreen_i(Fl_Menu_*, void*);
  static void cb_Fullscreen(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Ayuda;
  static Fl_Menu_Item *Contenido;
private:
  void cb_Contenido_i(Fl_Menu_*, void*);
  static void cb_Contenido(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Acerca_de;
private:
  void cb_Acerca_de_i(Fl_Menu_*, void*);
  static void cb_Acerca_de(Fl_Menu_*, void*);
public:
  Fl_Box *MT;
private:
  void cb_MT_i(Fl_Box*, void*);
  static void cb_MT(Fl_Box*, void*);
public:
  Fl_Button *TITTLE_L;
private:
  void cb_TITTLE_L_i(Fl_Button*, void*);
  static void cb_TITTLE_L(Fl_Button*, void*);
public:
  Fl_Box *LMT_LED;
  Fl_Box *CLIP_LED;
  Fl_Box *UPS_LED;
  Fl_Box *P_MIN_ST;
  Fl_Box *P_MOUT_ST;
  Fl_Box *P_AUX_ST;
  Fl_Box *P_IN_ST;
  Fl_Box *P_OUT_ST;
  Fl_Box *CPULOAD;
  Scope *Sco;
  Fl_Box *E1;
  Fl_Box *E2;
  Fl_Box *E3;
  Fl_Box *E4;
  Fl_Box *E5;
  Fl_Box *E6;
  Fl_Box *E7;
  Fl_Box *E8;
  Fl_Box *E9;
  Fl_Box *E10;
  Fl_Box *L1;
  Fl_Box *L2;
  Fl_Box *L3;
  Fl_Box *L4;
  Fl_Box *L5;
  Fl_Box *L6;
  Fl_Box *L7;
  Fl_Box *L8;
  Fl_Box *L9;
  Fl_Box *L10;
  Fl_Group *EQ;
  Fl_Light_Button *eq_activar;
private:
  void cb_eq_activar_i(Fl_Light_Button*, void*);
  static void cb_eq_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *eq_preset;
private:
  void cb_eq_preset_i(Fl_Choice*, void*);
  static void cb_eq_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_eq_preset[];
public:
  SliderW *eq_Gain;
private:
  void cb_eq_Gain_i(SliderW*, void*);
  static void cb_eq_Gain(SliderW*, void*);
public:
  SliderW *eq_Q;
private:
  void cb_eq_Q_i(SliderW*, void*);
  static void cb_eq_Q(SliderW*, void*);
public:
  SliderW *eq_1;
private:
  void cb_eq_1_i(SliderW*, void*);
  static void cb_eq_1(SliderW*, void*);
public:
  SliderW *eq_2;
private:
  void cb_eq_2_i(SliderW*, void*);
  static void cb_eq_2(SliderW*, void*);
public:
  SliderW *eq_3;
private:
  void cb_eq_3_i(SliderW*, void*);
  static void cb_eq_3(SliderW*, void*);
public:
  SliderW *eq_4;
private:
  void cb_eq_4_i(SliderW*, void*);
  static void cb_eq_4(SliderW*, void*);
public:
  SliderW *eq_5;
private:
  void cb_eq_5_i(SliderW*, void*);
  static void cb_eq_5(SliderW*, void*);
public:
  SliderW *eq_6;
private:
  void cb_eq_6_i(SliderW*, void*);
  static void cb_eq_6(SliderW*, void*);
public:
  SliderW *eq_7;
private:
  void cb_eq_7_i(SliderW*, void*);
  static void cb_eq_7(SliderW*, void*);
public:
  SliderW *eq_8;
private:
  void cb_eq_8_i(SliderW*, void*);
  static void cb_eq_8(SliderW*, void*);
public:
  SliderW *eq_9;
private:
  void cb_eq_9_i(SliderW*, void*);
  static void cb_eq_9(SliderW*, void*);
public:
  SliderW *eq_10;
private:
  void cb_eq_10_i(SliderW*, void*);
  static void cb_eq_10(SliderW*, void*);
public:
  Fl_Group *COMPRESS;
  Fl_Light_Button *compress_activar;
private:
  void cb_compress_activar_i(Fl_Light_Button*, void*);
  static void cb_compress_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *compress_preset;
private:
  void cb_compress_preset_i(Fl_Choice*, void*);
  static void cb_compress_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_compress_preset[];
public:
  SliderW *compress_ATime;
private:
  void cb_compress_ATime_i(SliderW*, void*);
  static void cb_compress_ATime(SliderW*, void*);
public:
  SliderW *compress_RTime;
private:
  void cb_compress_RTime_i(SliderW*, void*);
  static void cb_compress_RTime(SliderW*, void*);
public:
  SliderW *compress_Ratio;
private:
  void cb_compress_Ratio_i(SliderW*, void*);
  static void cb_compress_Ratio(SliderW*, void*);
public:
  SliderW *compress_Knee;
private:
  void cb_compress_Knee_i(SliderW*, void*);
  static void cb_compress_Knee(SliderW*, void*);
public:
  SliderW *compress_threshold;
private:
  void cb_compress_threshold_i(SliderW*, void*);
  static void cb_compress_threshold(SliderW*, void*);
public:
  SliderW *compress_output;
private:
  void cb_compress_output_i(SliderW*, void*);
  static void cb_compress_output(SliderW*, void*);
public:
  Fl_Check_Button *Auto_Output;
private:
  void cb_Auto_Output_i(Fl_Check_Button*, void*);
  static void cb_Auto_Output(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Stereo;
private:
  void cb_Stereo_i(Fl_Check_Button*, void*);
  static void cb_Stereo(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Peak;
private:
  void cb_Peak_i(Fl_Check_Button*, void*);
  static void cb_Peak(Fl_Check_Button*, void*);
public:
  Fl_Group *DIST;
  Fl_Light_Button *dist_activar;
private:
  void cb_dist_activar_i(Fl_Light_Button*, void*);
  static void cb_dist_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *dist_preset;
private:
  void cb_dist_preset_i(Fl_Choice*, void*);
  static void cb_dist_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dist_preset[];
public:
  SliderW *dist_WD;
private:
  void cb_dist_WD_i(SliderW*, void*);
  static void cb_dist_WD(SliderW*, void*);
public:
  SliderW *dist_LRc;
private:
  void cb_dist_LRc_i(SliderW*, void*);
  static void cb_dist_LRc(SliderW*, void*);
public:
  SliderW *dist_drive;
private:
  void cb_dist_drive_i(SliderW*, void*);
  static void cb_dist_drive(SliderW*, void*);
public:
  SliderW *dist_level;
private:
  void cb_dist_level_i(SliderW*, void*);
  static void cb_dist_level(SliderW*, void*);
public:
  Fl_Choice *dist_tipo;
private:
  void cb_dist_tipo_i(Fl_Choice*, void*);
  static void cb_dist_tipo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dist_tipo[];
public:
  Fl_Check_Button *dist_neg;
private:
  void cb_dist_neg_i(Fl_Check_Button*, void*);
  static void cb_dist_neg(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dist_pf;
private:
  void cb_dist_pf_i(Fl_Check_Button*, void*);
  static void cb_dist_pf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dist_st;
private:
  void cb_dist_st_i(Fl_Check_Button*, void*);
  static void cb_dist_st(Fl_Check_Button*, void*);
public:
  SliderW *dist_pan;
private:
  void cb_dist_pan_i(SliderW*, void*);
  static void cb_dist_pan(SliderW*, void*);
public:
  SliderW *dist_oct;
private:
  void cb_dist_oct_i(SliderW*, void*);
  static void cb_dist_oct(SliderW*, void*);
public:
  SliderW *dist_lpf;
private:
  void cb_dist_lpf_i(SliderW*, void*);
  static void cb_dist_lpf(SliderW*, void*);
public:
  SliderW *dist_hpf;
private:
  void cb_dist_hpf_i(SliderW*, void*);
  static void cb_dist_hpf(SliderW*, void*);
public:
  Fl_Group *OVRD;
  Fl_Light_Button *ovrd_activar;
private:
  void cb_ovrd_activar_i(Fl_Light_Button*, void*);
  static void cb_ovrd_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *ovrd_preset;
private:
  void cb_ovrd_preset_i(Fl_Choice*, void*);
  static void cb_ovrd_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_ovrd_preset[];
public:
  SliderW *ovrd_WD;
private:
  void cb_ovrd_WD_i(SliderW*, void*);
  static void cb_ovrd_WD(SliderW*, void*);
public:
  SliderW *ovrd_LRc;
private:
  void cb_ovrd_LRc_i(SliderW*, void*);
  static void cb_ovrd_LRc(SliderW*, void*);
public:
  SliderW *ovrd_drive;
private:
  void cb_ovrd_drive_i(SliderW*, void*);
  static void cb_ovrd_drive(SliderW*, void*);
public:
  SliderW *ovrd_level;
private:
  void cb_ovrd_level_i(SliderW*, void*);
  static void cb_ovrd_level(SliderW*, void*);
public:
  Fl_Choice *ovrd_tipo;
private:
  void cb_ovrd_tipo_i(Fl_Choice*, void*);
  static void cb_ovrd_tipo(Fl_Choice*, void*);
public:
  Fl_Check_Button *ovrd_neg;
private:
  void cb_ovrd_neg_i(Fl_Check_Button*, void*);
  static void cb_ovrd_neg(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ovrd_st;
private:
  void cb_ovrd_st_i(Fl_Check_Button*, void*);
  static void cb_ovrd_st(Fl_Check_Button*, void*);
public:
  SliderW *ovrd_pan;
private:
  void cb_ovrd_pan_i(SliderW*, void*);
  static void cb_ovrd_pan(SliderW*, void*);
public:
  Fl_Check_Button *ovrd_pf;
private:
  void cb_ovrd_pf_i(Fl_Check_Button*, void*);
  static void cb_ovrd_pf(Fl_Check_Button*, void*);
public:
  SliderW *ovrd_lpf;
private:
  void cb_ovrd_lpf_i(SliderW*, void*);
  static void cb_ovrd_lpf(SliderW*, void*);
public:
  SliderW *ovrd_hpf;
private:
  void cb_ovrd_hpf_i(SliderW*, void*);
  static void cb_ovrd_hpf(SliderW*, void*);
public:
  Fl_Group *ECHO;
  Fl_Light_Button *echo_activar;
private:
  void cb_echo_activar_i(Fl_Light_Button*, void*);
  static void cb_echo_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *echo_preset;
private:
  void cb_echo_preset_i(Fl_Choice*, void*);
  static void cb_echo_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echo_preset[];
public:
  SliderW *echo_WD;
private:
  void cb_echo_WD_i(SliderW*, void*);
  static void cb_echo_WD(SliderW*, void*);
public:
  SliderW *echo_RV;
private:
  void cb_echo_RV_i(SliderW*, void*);
  static void cb_echo_RV(SliderW*, void*);
public:
  SliderW *echo_pan;
private:
  void cb_echo_pan_i(SliderW*, void*);
  static void cb_echo_pan(SliderW*, void*);
public:
  SliderW *echo_delay;
private:
  void cb_echo_delay_i(SliderW*, void*);
  static void cb_echo_delay(SliderW*, void*);
public:
  SliderW *echo_LRdl;
private:
  void cb_echo_LRdl_i(SliderW*, void*);
  static void cb_echo_LRdl(SliderW*, void*);
public:
  SliderW *echo_LRc;
private:
  void cb_echo_LRc_i(SliderW*, void*);
  static void cb_echo_LRc(SliderW*, void*);
public:
  SliderW *echo_fb;
private:
  void cb_echo_fb_i(SliderW*, void*);
  static void cb_echo_fb(SliderW*, void*);
public:
  Fl_Check_Button *echo_direct;
private:
  void cb_echo_direct_i(Fl_Check_Button*, void*);
  static void cb_echo_direct(Fl_Check_Button*, void*);
public:
  SliderW *echo_damp;
private:
  void cb_echo_damp_i(SliderW*, void*);
  static void cb_echo_damp(SliderW*, void*);
public:
  Fl_Group *CHORUS;
  Fl_Light_Button *chorus_activar;
private:
  void cb_chorus_activar_i(Fl_Light_Button*, void*);
  static void cb_chorus_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *chorus_preset;
private:
  void cb_chorus_preset_i(Fl_Choice*, void*);
  static void cb_chorus_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorus_preset[];
public:
  SliderW *chorus_WD;
private:
  void cb_chorus_WD_i(SliderW*, void*);
  static void cb_chorus_WD(SliderW*, void*);
public:
  SliderW *chorus_pan;
private:
  void cb_chorus_pan_i(SliderW*, void*);
  static void cb_chorus_pan(SliderW*, void*);
public:
  SliderW *chorus_freq;
private:
  void cb_chorus_freq_i(SliderW*, void*);
  static void cb_chorus_freq(SliderW*, void*);
public:
  SliderW *chorus_rnd;
private:
  void cb_chorus_rnd_i(SliderW*, void*);
  static void cb_chorus_rnd(SliderW*, void*);
public:
  Fl_Choice *chorus_lfotype;
private:
  void cb_chorus_lfotype_i(Fl_Choice*, void*);
  static void cb_chorus_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorus_lfotype[];
public:
  Fl_Check_Button *chorus_subs;
private:
  void cb_chorus_subs_i(Fl_Check_Button*, void*);
  static void cb_chorus_subs(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *chorus_awesome;
private:
  void cb_chorus_awesome_i(Fl_Check_Button*, void*);
  static void cb_chorus_awesome(Fl_Check_Button*, void*);
public:
  SliderW *chorus_stdf;
private:
  void cb_chorus_stdf_i(SliderW*, void*);
  static void cb_chorus_stdf(SliderW*, void*);
public:
  SliderW *chorus_dpth;
private:
  void cb_chorus_dpth_i(SliderW*, void*);
  static void cb_chorus_dpth(SliderW*, void*);
public:
  SliderW *chorus_delay;
private:
  void cb_chorus_delay_i(SliderW*, void*);
  static void cb_chorus_delay(SliderW*, void*);
public:
  SliderW *chorus_fb;
private:
  void cb_chorus_fb_i(SliderW*, void*);
  static void cb_chorus_fb(SliderW*, void*);
public:
  SliderW *chorus_LR;
private:
  void cb_chorus_LR_i(SliderW*, void*);
  static void cb_chorus_LR(SliderW*, void*);
public:
  Fl_Group *PHASER;
  Fl_Light_Button *phaser_activar;
private:
  void cb_phaser_activar_i(Fl_Light_Button*, void*);
  static void cb_phaser_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *phaser_preset;
private:
  void cb_phaser_preset_i(Fl_Choice*, void*);
  static void cb_phaser_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_phaser_preset[];
public:
  SliderW *phaser_WD;
private:
  void cb_phaser_WD_i(SliderW*, void*);
  static void cb_phaser_WD(SliderW*, void*);
public:
  SliderW *phaser_pan;
private:
  void cb_phaser_pan_i(SliderW*, void*);
  static void cb_phaser_pan(SliderW*, void*);
public:
  SliderW *phaser_freq;
private:
  void cb_phaser_freq_i(SliderW*, void*);
  static void cb_phaser_freq(SliderW*, void*);
public:
  SliderW *phaser_rnd;
private:
  void cb_phaser_rnd_i(SliderW*, void*);
  static void cb_phaser_rnd(SliderW*, void*);
public:
  Fl_Choice *phaser_lfotype;
private:
  void cb_phaser_lfotype_i(Fl_Choice*, void*);
  static void cb_phaser_lfotype(Fl_Choice*, void*);
public:
  Fl_Check_Button *phaser_subs;
private:
  void cb_phaser_subs_i(Fl_Check_Button*, void*);
  static void cb_phaser_subs(Fl_Check_Button*, void*);
public:
  SliderW *phaser_phase;
private:
  void cb_phaser_phase_i(SliderW*, void*);
  static void cb_phaser_phase(SliderW*, void*);
public:
  SliderW *phaser_stdf;
private:
  void cb_phaser_stdf_i(SliderW*, void*);
  static void cb_phaser_stdf(SliderW*, void*);
public:
  SliderW *phaser_dpth;
private:
  void cb_phaser_dpth_i(SliderW*, void*);
  static void cb_phaser_dpth(SliderW*, void*);
public:
  SliderW *phaser_fb;
private:
  void cb_phaser_fb_i(SliderW*, void*);
  static void cb_phaser_fb(SliderW*, void*);
public:
  Fl_Counter *phaser_stages;
private:
  void cb_phaser_stages_i(Fl_Counter*, void*);
  static void cb_phaser_stages(Fl_Counter*, void*);
public:
  SliderW *phaser_LR;
private:
  void cb_phaser_LR_i(SliderW*, void*);
  static void cb_phaser_LR(SliderW*, void*);
public:
  Fl_Group *FLANGER;
  Fl_Light_Button *flanger_activar;
private:
  void cb_flanger_activar_i(Fl_Light_Button*, void*);
  static void cb_flanger_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *flanger_preset;
private:
  void cb_flanger_preset_i(Fl_Choice*, void*);
  static void cb_flanger_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_flanger_preset[];
public:
  SliderW *flanger_WD;
private:
  void cb_flanger_WD_i(SliderW*, void*);
  static void cb_flanger_WD(SliderW*, void*);
public:
  SliderW *flanger_pan;
private:
  void cb_flanger_pan_i(SliderW*, void*);
  static void cb_flanger_pan(SliderW*, void*);
public:
  SliderW *flanger_freq;
private:
  void cb_flanger_freq_i(SliderW*, void*);
  static void cb_flanger_freq(SliderW*, void*);
public:
  SliderW *flanger_rnd;
private:
  void cb_flanger_rnd_i(SliderW*, void*);
  static void cb_flanger_rnd(SliderW*, void*);
public:
  Fl_Choice *flanger_lfotype;
private:
  void cb_flanger_lfotype_i(Fl_Choice*, void*);
  static void cb_flanger_lfotype(Fl_Choice*, void*);
public:
  Fl_Check_Button *flanger_subs;
private:
  void cb_flanger_subs_i(Fl_Check_Button*, void*);
  static void cb_flanger_subs(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *flanger_awesome;
private:
  void cb_flanger_awesome_i(Fl_Check_Button*, void*);
  static void cb_flanger_awesome(Fl_Check_Button*, void*);
public:
  SliderW *flanger_stdf;
private:
  void cb_flanger_stdf_i(SliderW*, void*);
  static void cb_flanger_stdf(SliderW*, void*);
public:
  SliderW *flanger_dpth;
private:
  void cb_flanger_dpth_i(SliderW*, void*);
  static void cb_flanger_dpth(SliderW*, void*);
public:
  SliderW *flanger_delay;
private:
  void cb_flanger_delay_i(SliderW*, void*);
  static void cb_flanger_delay(SliderW*, void*);
public:
  SliderW *flanger_fb;
private:
  void cb_flanger_fb_i(SliderW*, void*);
  static void cb_flanger_fb(SliderW*, void*);
public:
  SliderW *flanger_LR;
private:
  void cb_flanger_LR_i(SliderW*, void*);
  static void cb_flanger_LR(SliderW*, void*);
public:
  Fl_Group *REVERB;
  Fl_Light_Button *reverb_activar;
private:
  void cb_reverb_activar_i(Fl_Light_Button*, void*);
  static void cb_reverb_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *reverb_preset;
private:
  void cb_reverb_preset_i(Fl_Choice*, void*);
  static void cb_reverb_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_reverb_preset[];
public:
  SliderW *reverb_WD;
private:
  void cb_reverb_WD_i(SliderW*, void*);
  static void cb_reverb_WD(SliderW*, void*);
public:
  SliderW *reverb_pan;
private:
  void cb_reverb_pan_i(SliderW*, void*);
  static void cb_reverb_pan(SliderW*, void*);
public:
  SliderW *reverb_time;
private:
  void cb_reverb_time_i(SliderW*, void*);
  static void cb_reverb_time(SliderW*, void*);
public:
  SliderW *reverb_ldel;
private:
  void cb_reverb_ldel_i(SliderW*, void*);
  static void cb_reverb_ldel(SliderW*, void*);
public:
  SliderW *reverb_ldelft;
private:
  void cb_reverb_ldelft_i(SliderW*, void*);
  static void cb_reverb_ldelft(SliderW*, void*);
public:
  Fl_Choice *reverb_type;
private:
  void cb_reverb_type_i(Fl_Choice*, void*);
  static void cb_reverb_type(Fl_Choice*, void*);
  static Fl_Menu_Item menu_reverb_type[];
  void cb_Random_i(Fl_Menu_*, void*);
  static void cb_Random(Fl_Menu_*, void*);
public:
  SliderW *reverb_RS;
private:
  void cb_reverb_RS_i(SliderW*, void*);
  static void cb_reverb_RS(SliderW*, void*);
public:
  SliderW *reverb_LPF;
private:
  void cb_reverb_LPF_i(SliderW*, void*);
  static void cb_reverb_LPF(SliderW*, void*);
public:
  SliderW *reverb_HPF;
private:
  void cb_reverb_HPF_i(SliderW*, void*);
  static void cb_reverb_HPF(SliderW*, void*);
public:
  SliderW *reverb_damp;
private:
  void cb_reverb_damp_i(SliderW*, void*);
  static void cb_reverb_damp(SliderW*, void*);
public:
  Fl_Group *PEQ;
  Fl_Light_Button *eqp_activar;
private:
  void cb_eqp_activar_i(Fl_Light_Button*, void*);
  static void cb_eqp_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *eqp_preset;
private:
  void cb_eqp_preset_i(Fl_Choice*, void*);
  static void cb_eqp_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_eqp_preset[];
public:
  SliderW *eqp_Gain;
private:
  void cb_eqp_Gain_i(SliderW*, void*);
  static void cb_eqp_Gain(SliderW*, void*);
public:
  SliderW *eqp_LF;
private:
  void cb_eqp_LF_i(SliderW*, void*);
  static void cb_eqp_LF(SliderW*, void*);
public:
  SliderW *eqp_LFg;
private:
  void cb_eqp_LFg_i(SliderW*, void*);
  static void cb_eqp_LFg(SliderW*, void*);
public:
  SliderW *eqp_LQ;
private:
  void cb_eqp_LQ_i(SliderW*, void*);
  static void cb_eqp_LQ(SliderW*, void*);
public:
  SliderW *eqp_MF;
private:
  void cb_eqp_MF_i(SliderW*, void*);
  static void cb_eqp_MF(SliderW*, void*);
public:
  SliderW *eqp_MFg;
private:
  void cb_eqp_MFg_i(SliderW*, void*);
  static void cb_eqp_MFg(SliderW*, void*);
public:
  SliderW *eqp_MQ;
private:
  void cb_eqp_MQ_i(SliderW*, void*);
  static void cb_eqp_MQ(SliderW*, void*);
public:
  SliderW *eqp_HF;
private:
  void cb_eqp_HF_i(SliderW*, void*);
  static void cb_eqp_HF(SliderW*, void*);
public:
  SliderW *eqp_HFg;
private:
  void cb_eqp_HFg_i(SliderW*, void*);
  static void cb_eqp_HFg(SliderW*, void*);
public:
  SliderW *eqp_HQ;
private:
  void cb_eqp_HQ_i(SliderW*, void*);
  static void cb_eqp_HQ(SliderW*, void*);
public:
  Fl_Group *WHAWHA;
  Fl_Light_Button *WhaWha_activar;
private:
  void cb_WhaWha_activar_i(Fl_Light_Button*, void*);
  static void cb_WhaWha_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *WhaWha_preset;
private:
  void cb_WhaWha_preset_i(Fl_Choice*, void*);
  static void cb_WhaWha_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_WhaWha_preset[];
public:
  SliderW *WhaWha_WD;
private:
  void cb_WhaWha_WD_i(SliderW*, void*);
  static void cb_WhaWha_WD(SliderW*, void*);
public:
  SliderW *WhaWha_pan;
private:
  void cb_WhaWha_pan_i(SliderW*, void*);
  static void cb_WhaWha_pan(SliderW*, void*);
public:
  SliderW *WhaWha_freq;
private:
  void cb_WhaWha_freq_i(SliderW*, void*);
  static void cb_WhaWha_freq(SliderW*, void*);
public:
  SliderW *WhaWha_rnd;
private:
  void cb_WhaWha_rnd_i(SliderW*, void*);
  static void cb_WhaWha_rnd(SliderW*, void*);
public:
  Fl_Choice *WhaWha_lfotype;
private:
  void cb_WhaWha_lfotype_i(Fl_Choice*, void*);
  static void cb_WhaWha_lfotype(Fl_Choice*, void*);
public:
  SliderW *WhaWha_stdf;
private:
  void cb_WhaWha_stdf_i(SliderW*, void*);
  static void cb_WhaWha_stdf(SliderW*, void*);
public:
  SliderW *WhaWha_dpth;
private:
  void cb_WhaWha_dpth_i(SliderW*, void*);
  static void cb_WhaWha_dpth(SliderW*, void*);
public:
  SliderW *WhaWha_ampsns;
private:
  void cb_WhaWha_ampsns_i(SliderW*, void*);
  static void cb_WhaWha_ampsns(SliderW*, void*);
public:
  Fl_Check_Button *WhaWha_ampsnsinv;
private:
  void cb_WhaWha_ampsnsinv_i(Fl_Check_Button*, void*);
  static void cb_WhaWha_ampsnsinv(Fl_Check_Button*, void*);
public:
  SliderW *WhaWha_smooth;
private:
  void cb_WhaWha_smooth_i(SliderW*, void*);
  static void cb_WhaWha_smooth(SliderW*, void*);
public:
  Fl_Group *ALIENWAH;
  Fl_Light_Button *Alienwah_activar;
private:
  void cb_Alienwah_activar_i(Fl_Light_Button*, void*);
  static void cb_Alienwah_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *Alienwah_preset;
private:
  void cb_Alienwah_preset_i(Fl_Choice*, void*);
  static void cb_Alienwah_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Alienwah_preset[];
public:
  SliderW *Alienwah_WD;
private:
  void cb_Alienwah_WD_i(SliderW*, void*);
  static void cb_Alienwah_WD(SliderW*, void*);
public:
  SliderW *Alienwah_pan;
private:
  void cb_Alienwah_pan_i(SliderW*, void*);
  static void cb_Alienwah_pan(SliderW*, void*);
public:
  SliderW *Alienwah_freq;
private:
  void cb_Alienwah_freq_i(SliderW*, void*);
  static void cb_Alienwah_freq(SliderW*, void*);
public:
  SliderW *Alienwah_rnd;
private:
  void cb_Alienwah_rnd_i(SliderW*, void*);
  static void cb_Alienwah_rnd(SliderW*, void*);
public:
  Fl_Choice *Alienwah_lfotype;
private:
  void cb_Alienwah_lfotype_i(Fl_Choice*, void*);
  static void cb_Alienwah_lfotype(Fl_Choice*, void*);
public:
  SliderW *Alienwah_phase;
private:
  void cb_Alienwah_phase_i(SliderW*, void*);
  static void cb_Alienwah_phase(SliderW*, void*);
public:
  SliderW *Alienwah_stdf;
private:
  void cb_Alienwah_stdf_i(SliderW*, void*);
  static void cb_Alienwah_stdf(SliderW*, void*);
public:
  SliderW *Alienwah_dpth;
private:
  void cb_Alienwah_dpth_i(SliderW*, void*);
  static void cb_Alienwah_dpth(SliderW*, void*);
public:
  SliderW *Alienwah_delay;
private:
  void cb_Alienwah_delay_i(SliderW*, void*);
  static void cb_Alienwah_delay(SliderW*, void*);
public:
  SliderW *Alienwah_fb;
private:
  void cb_Alienwah_fb_i(SliderW*, void*);
  static void cb_Alienwah_fb(SliderW*, void*);
public:
  SliderW *Alienwah_LR;
private:
  void cb_Alienwah_LR_i(SliderW*, void*);
  static void cb_Alienwah_LR(SliderW*, void*);
public:
  Fl_Group *CABINET;
  Fl_Light_Button *Cabinet_activar;
private:
  void cb_Cabinet_activar_i(Fl_Light_Button*, void*);
  static void cb_Cabinet_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *Cabinet_preset;
private:
  void cb_Cabinet_preset_i(Fl_Choice*, void*);
  static void cb_Cabinet_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Cabinet_preset[];
public:
  SliderW *Cabinet_output;
private:
  void cb_Cabinet_output_i(SliderW*, void*);
  static void cb_Cabinet_output(SliderW*, void*);
public:
  Fl_Group *PAN;
  Fl_Light_Button *pan_activar;
private:
  void cb_pan_activar_i(Fl_Light_Button*, void*);
  static void cb_pan_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *pan_preset;
private:
  void cb_pan_preset_i(Fl_Choice*, void*);
  static void cb_pan_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_pan_preset[];
public:
  SliderW *pan_WD;
private:
  void cb_pan_WD_i(SliderW*, void*);
  static void cb_pan_WD(SliderW*, void*);
public:
  SliderW *pan_pan;
private:
  void cb_pan_pan_i(SliderW*, void*);
  static void cb_pan_pan(SliderW*, void*);
public:
  Fl_Check_Button *pan_autopan;
private:
  void cb_pan_autopan_i(Fl_Check_Button*, void*);
  static void cb_pan_autopan(Fl_Check_Button*, void*);
public:
  SliderW *pan_freq;
private:
  void cb_pan_freq_i(SliderW*, void*);
  static void cb_pan_freq(SliderW*, void*);
public:
  SliderW *pan_rnd;
private:
  void cb_pan_rnd_i(SliderW*, void*);
  static void cb_pan_rnd(SliderW*, void*);
public:
  Fl_Choice *pan_lfotype;
private:
  void cb_pan_lfotype_i(Fl_Choice*, void*);
  static void cb_pan_lfotype(Fl_Choice*, void*);
public:
  SliderW *pan_stdf;
private:
  void cb_pan_stdf_i(SliderW*, void*);
  static void cb_pan_stdf(SliderW*, void*);
public:
  Fl_Check_Button *pan_extraon;
private:
  void cb_pan_extraon_i(Fl_Check_Button*, void*);
  static void cb_pan_extraon(Fl_Check_Button*, void*);
public:
  SliderW *pan_extra;
private:
  void cb_pan_extra_i(SliderW*, void*);
  static void cb_pan_extra(SliderW*, void*);
public:
  Fl_Group *HAR;
  Fl_Light_Button *har_activar;
private:
  void cb_har_activar_i(Fl_Light_Button*, void*);
  static void cb_har_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *har_preset;
private:
  void cb_har_preset_i(Fl_Choice*, void*);
  static void cb_har_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_har_preset[];
public:
  SliderW *har_WD;
private:
  void cb_har_WD_i(SliderW*, void*);
  static void cb_har_WD(SliderW*, void*);
public:
  SliderW *har_int;
private:
  void cb_har_int_i(SliderW*, void*);
  static void cb_har_int(SliderW*, void*);
public:
  SliderW *har_gan;
private:
  void cb_har_gan_i(SliderW*, void*);
  static void cb_har_gan(SliderW*, void*);
public:
  SliderW *har_pan;
private:
  void cb_har_pan_i(SliderW*, void*);
  static void cb_har_pan(SliderW*, void*);
public:
  SliderW *har_freq1;
private:
  void cb_har_freq1_i(SliderW*, void*);
  static void cb_har_freq1(SliderW*, void*);
public:
  SliderW *har_gan1;
private:
  void cb_har_gan1_i(SliderW*, void*);
  static void cb_har_gan1(SliderW*, void*);
public:
  SliderW *har_q1;
private:
  void cb_har_q1_i(SliderW*, void*);
  static void cb_har_q1(SliderW*, void*);
public:
  Fl_Check_Button *har_MIDI;
private:
  void cb_har_MIDI_i(Fl_Check_Button*, void*);
  static void cb_har_MIDI(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *har_SELECT;
private:
  void cb_har_SELECT_i(Fl_Check_Button*, void*);
  static void cb_har_SELECT(Fl_Check_Button*, void*);
public:
  Fl_Box *har_chordname;
  SliderW *har_note;
private:
  void cb_har_note_i(SliderW*, void*);
  static void cb_har_note(SliderW*, void*);
public:
  SliderW *har_type;
private:
  void cb_har_type_i(SliderW*, void*);
  static void cb_har_type(SliderW*, void*);
public:
  Fl_Group *MUSDELAY;
  Fl_Light_Button *musdelay_activar;
private:
  void cb_musdelay_activar_i(Fl_Light_Button*, void*);
  static void cb_musdelay_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *musdelay_preset;
private:
  void cb_musdelay_preset_i(Fl_Choice*, void*);
  static void cb_musdelay_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_preset[];
public:
  SliderW *musdelay_WD;
private:
  void cb_musdelay_WD_i(SliderW*, void*);
  static void cb_musdelay_WD(SliderW*, void*);
public:
  SliderW *musdelay_LRc;
private:
  void cb_musdelay_LRc_i(SliderW*, void*);
  static void cb_musdelay_LRc(SliderW*, void*);
public:
  SliderW *musdelay_pan1;
private:
  void cb_musdelay_pan1_i(SliderW*, void*);
  static void cb_musdelay_pan1(SliderW*, void*);
public:
  SliderW *musdelay_pan2;
private:
  void cb_musdelay_pan2_i(SliderW*, void*);
  static void cb_musdelay_pan2(SliderW*, void*);
public:
  Fl_Choice *musdelay_delay1;
private:
  void cb_musdelay_delay1_i(Fl_Choice*, void*);
  static void cb_musdelay_delay1(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_delay1[];
public:
  Fl_Choice *musdelay_delay3;
private:
  void cb_musdelay_delay3_i(Fl_Choice*, void*);
  static void cb_musdelay_delay3(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_delay3[];
public:
  Fl_Choice *musdelay_delay2;
private:
  void cb_musdelay_delay2_i(Fl_Choice*, void*);
  static void cb_musdelay_delay2(Fl_Choice*, void*);
public:
  SliderW *musdelay_tempo;
private:
  void cb_musdelay_tempo_i(SliderW*, void*);
  static void cb_musdelay_tempo(SliderW*, void*);
public:
  SliderW *musdelay_gain1;
private:
  void cb_musdelay_gain1_i(SliderW*, void*);
  static void cb_musdelay_gain1(SliderW*, void*);
public:
  SliderW *musdelay_gain2;
private:
  void cb_musdelay_gain2_i(SliderW*, void*);
  static void cb_musdelay_gain2(SliderW*, void*);
public:
  SliderW *musdelay_fb1;
private:
  void cb_musdelay_fb1_i(SliderW*, void*);
  static void cb_musdelay_fb1(SliderW*, void*);
public:
  SliderW *musdelay_fb2;
private:
  void cb_musdelay_fb2_i(SliderW*, void*);
  static void cb_musdelay_fb2(SliderW*, void*);
public:
  SliderW *musdelay_damp;
private:
  void cb_musdelay_damp_i(SliderW*, void*);
  static void cb_musdelay_damp(SliderW*, void*);
public:
  Fl_Group *GATE;
  Fl_Light_Button *gate_activar;
private:
  void cb_gate_activar_i(Fl_Light_Button*, void*);
  static void cb_gate_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *gate_preset;
private:
  void cb_gate_preset_i(Fl_Choice*, void*);
  static void cb_gate_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_gate_preset[];
public:
  SliderW *gate_ATime;
private:
  void cb_gate_ATime_i(SliderW*, void*);
  static void cb_gate_ATime(SliderW*, void*);
public:
  SliderW *gate_RTime;
private:
  void cb_gate_RTime_i(SliderW*, void*);
  static void cb_gate_RTime(SliderW*, void*);
public:
  SliderW *gate_range;
private:
  void cb_gate_range_i(SliderW*, void*);
  static void cb_gate_range(SliderW*, void*);
public:
  SliderW *gate_threshold;
private:
  void cb_gate_threshold_i(SliderW*, void*);
  static void cb_gate_threshold(SliderW*, void*);
public:
  SliderW *gate_hold;
private:
  void cb_gate_hold_i(SliderW*, void*);
  static void cb_gate_hold(SliderW*, void*);
public:
  SliderW *gate_LPF;
private:
  void cb_gate_LPF_i(SliderW*, void*);
  static void cb_gate_LPF(SliderW*, void*);
public:
  SliderW *gate_HPF;
private:
  void cb_gate_HPF_i(SliderW*, void*);
  static void cb_gate_HPF(SliderW*, void*);
public:
  Fl_Group *NEWDIST;
  Fl_Light_Button *newdist_activar;
private:
  void cb_newdist_activar_i(Fl_Light_Button*, void*);
  static void cb_newdist_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *newdist_preset;
private:
  void cb_newdist_preset_i(Fl_Choice*, void*);
  static void cb_newdist_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_newdist_preset[];
public:
  SliderW *newdist_WD;
private:
  void cb_newdist_WD_i(SliderW*, void*);
  static void cb_newdist_WD(SliderW*, void*);
public:
  SliderW *newdist_LRc;
private:
  void cb_newdist_LRc_i(SliderW*, void*);
  static void cb_newdist_LRc(SliderW*, void*);
public:
  SliderW *newdist_drive;
private:
  void cb_newdist_drive_i(SliderW*, void*);
  static void cb_newdist_drive(SliderW*, void*);
public:
  SliderW *newdist_level;
private:
  void cb_newdist_level_i(SliderW*, void*);
  static void cb_newdist_level(SliderW*, void*);
public:
  Fl_Choice *newdist_tipo;
private:
  void cb_newdist_tipo_i(Fl_Choice*, void*);
  static void cb_newdist_tipo(Fl_Choice*, void*);
public:
  Fl_Check_Button *newdist_neg;
private:
  void cb_newdist_neg_i(Fl_Check_Button*, void*);
  static void cb_newdist_neg(Fl_Check_Button*, void*);
public:
  SliderW *newdist_st;
private:
  void cb_newdist_st_i(SliderW*, void*);
  static void cb_newdist_st(SliderW*, void*);
public:
  SliderW *newdist_oct;
private:
  void cb_newdist_oct_i(SliderW*, void*);
  static void cb_newdist_oct(SliderW*, void*);
public:
  SliderW *newdist_pan;
private:
  void cb_newdist_pan_i(SliderW*, void*);
  static void cb_newdist_pan(SliderW*, void*);
public:
  Fl_Check_Button *newdist_pf;
private:
  void cb_newdist_pf_i(Fl_Check_Button*, void*);
  static void cb_newdist_pf(Fl_Check_Button*, void*);
public:
  SliderW *newdist_lpf;
private:
  void cb_newdist_lpf_i(SliderW*, void*);
  static void cb_newdist_lpf(SliderW*, void*);
public:
  SliderW *newdist_hpf;
private:
  void cb_newdist_hpf_i(SliderW*, void*);
  static void cb_newdist_hpf(SliderW*, void*);
public:
  Fl_Group *APHASER;
  Fl_Light_Button *aphaser_activar;
private:
  void cb_aphaser_activar_i(Fl_Light_Button*, void*);
  static void cb_aphaser_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *aphaser_preset;
private:
  void cb_aphaser_preset_i(Fl_Choice*, void*);
  static void cb_aphaser_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_aphaser_preset[];
public:
  SliderW *aphaser_WD;
private:
  void cb_aphaser_WD_i(SliderW*, void*);
  static void cb_aphaser_WD(SliderW*, void*);
public:
  Fl_Choice *aphaser_lfotype;
private:
  void cb_aphaser_lfotype_i(Fl_Choice*, void*);
  static void cb_aphaser_lfotype(Fl_Choice*, void*);
public:
  SliderW *aphaser_freq;
private:
  void cb_aphaser_freq_i(SliderW*, void*);
  static void cb_aphaser_freq(SliderW*, void*);
public:
  SliderW *aphaser_dpth;
private:
  void cb_aphaser_dpth_i(SliderW*, void*);
  static void cb_aphaser_dpth(SliderW*, void*);
public:
  SliderW *aphaser_phase;
private:
  void cb_aphaser_phase_i(SliderW*, void*);
  static void cb_aphaser_phase(SliderW*, void*);
public:
  SliderW *aphaser_fb;
private:
  void cb_aphaser_fb_i(SliderW*, void*);
  static void cb_aphaser_fb(SliderW*, void*);
public:
  SliderW *aphaser_LR;
private:
  void cb_aphaser_LR_i(SliderW*, void*);
  static void cb_aphaser_LR(SliderW*, void*);
public:
  SliderW *aphaser_pan;
private:
  void cb_aphaser_pan_i(SliderW*, void*);
  static void cb_aphaser_pan(SliderW*, void*);
public:
  SliderW *aphaser_stdf;
private:
  void cb_aphaser_stdf_i(SliderW*, void*);
  static void cb_aphaser_stdf(SliderW*, void*);
public:
  Fl_Counter *aphaser_stages;
private:
  void cb_aphaser_stages_i(Fl_Counter*, void*);
  static void cb_aphaser_stages(Fl_Counter*, void*);
public:
  Fl_Check_Button *aphaser_subs;
private:
  void cb_aphaser_subs_i(Fl_Check_Button*, void*);
  static void cb_aphaser_subs(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *aphaser_hyper;
private:
  void cb_aphaser_hyper_i(Fl_Check_Button*, void*);
  static void cb_aphaser_hyper(Fl_Check_Button*, void*);
public:
  Fl_Group *VALVE;
  Fl_Light_Button *valve_activar;
private:
  void cb_valve_activar_i(Fl_Light_Button*, void*);
  static void cb_valve_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *valve_preset;
private:
  void cb_valve_preset_i(Fl_Choice*, void*);
  static void cb_valve_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_valve_preset[];
public:
  SliderW *valve_WD;
private:
  void cb_valve_WD_i(SliderW*, void*);
  static void cb_valve_WD(SliderW*, void*);
public:
  SliderW *valve_LRc;
private:
  void cb_valve_LRc_i(SliderW*, void*);
  static void cb_valve_LRc(SliderW*, void*);
public:
  SliderW *valve_pan;
private:
  void cb_valve_pan_i(SliderW*, void*);
  static void cb_valve_pan(SliderW*, void*);
public:
  SliderW *valve_level;
private:
  void cb_valve_level_i(SliderW*, void*);
  static void cb_valve_level(SliderW*, void*);
public:
  SliderW *valve_drive;
private:
  void cb_valve_drive_i(SliderW*, void*);
  static void cb_valve_drive(SliderW*, void*);
public:
  Fl_Check_Button *valve_ed;
private:
  void cb_valve_ed_i(Fl_Check_Button*, void*);
  static void cb_valve_ed(Fl_Check_Button*, void*);
public:
  SliderW *valve_Q;
private:
  void cb_valve_Q_i(SliderW*, void*);
  static void cb_valve_Q(SliderW*, void*);
public:
  SliderW *valve_Pre;
private:
  void cb_valve_Pre_i(SliderW*, void*);
  static void cb_valve_Pre(SliderW*, void*);
public:
  Fl_Check_Button *valve_pf;
private:
  void cb_valve_pf_i(Fl_Check_Button*, void*);
  static void cb_valve_pf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *valve_st;
private:
  void cb_valve_st_i(Fl_Check_Button*, void*);
  static void cb_valve_st(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *valve_neg;
private:
  void cb_valve_neg_i(Fl_Check_Button*, void*);
  static void cb_valve_neg(Fl_Check_Button*, void*);
public:
  SliderW *valve_lpf;
private:
  void cb_valve_lpf_i(SliderW*, void*);
  static void cb_valve_lpf(SliderW*, void*);
public:
  SliderW *valve_hpf;
private:
  void cb_valve_hpf_i(SliderW*, void*);
  static void cb_valve_hpf(SliderW*, void*);
public:
  Fl_Group *DFLANGE;
  Fl_Light_Button *dflange_activar;
private:
  void cb_dflange_activar_i(Fl_Light_Button*, void*);
  static void cb_dflange_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *dflange_preset;
private:
  void cb_dflange_preset_i(Fl_Choice*, void*);
  static void cb_dflange_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dflange_preset[];
public:
  SliderW *dflange_WD;
private:
  void cb_dflange_WD_i(SliderW*, void*);
  static void cb_dflange_WD(SliderW*, void*);
public:
  SliderW *dflange_pan;
private:
  void cb_dflange_pan_i(SliderW*, void*);
  static void cb_dflange_pan(SliderW*, void*);
public:
  SliderW *dflange_LR;
private:
  void cb_dflange_LR_i(SliderW*, void*);
  static void cb_dflange_LR(SliderW*, void*);
public:
  SliderW *dflange_depth;
private:
  void cb_dflange_depth_i(SliderW*, void*);
  static void cb_dflange_depth(SliderW*, void*);
public:
  SliderW *dflange_width;
private:
  void cb_dflange_width_i(SliderW*, void*);
  static void cb_dflange_width(SliderW*, void*);
public:
  SliderW *dflange_offset;
private:
  void cb_dflange_offset_i(SliderW*, void*);
  static void cb_dflange_offset(SliderW*, void*);
public:
  SliderW *dflange_fb;
private:
  void cb_dflange_fb_i(SliderW*, void*);
  static void cb_dflange_fb(SliderW*, void*);
public:
  SliderW *dflange_lpf;
private:
  void cb_dflange_lpf_i(SliderW*, void*);
  static void cb_dflange_lpf(SliderW*, void*);
public:
  Fl_Check_Button *dflange_subs;
private:
  void cb_dflange_subs_i(Fl_Check_Button*, void*);
  static void cb_dflange_subs(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dflange_tz;
private:
  void cb_dflange_tz_i(Fl_Check_Button*, void*);
  static void cb_dflange_tz(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dflange_intense;
private:
  void cb_dflange_intense_i(Fl_Check_Button*, void*);
  static void cb_dflange_intense(Fl_Check_Button*, void*);
public:
  SliderW *dflange_freq;
private:
  void cb_dflange_freq_i(SliderW*, void*);
  static void cb_dflange_freq(SliderW*, void*);
public:
  SliderW *dflange_stdf;
private:
  void cb_dflange_stdf_i(SliderW*, void*);
  static void cb_dflange_stdf(SliderW*, void*);
public:
  Fl_Choice *dflange_lfotype;
private:
  void cb_dflange_lfotype_i(Fl_Choice*, void*);
  static void cb_dflange_lfotype(Fl_Choice*, void*);
public:
  SliderW *dflange_rnd;
private:
  void cb_dflange_rnd_i(SliderW*, void*);
  static void cb_dflange_rnd(SliderW*, void*);
public:
  Fl_Group *RING;
  Fl_Light_Button *ring_activar;
private:
  void cb_ring_activar_i(Fl_Light_Button*, void*);
  static void cb_ring_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *ring_preset;
private:
  void cb_ring_preset_i(Fl_Choice*, void*);
  static void cb_ring_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_ring_preset[];
public:
  SliderW *ring_WD;
private:
  void cb_ring_WD_i(SliderW*, void*);
  static void cb_ring_WD(SliderW*, void*);
public:
  SliderW *ring_LRc;
private:
  void cb_ring_LRc_i(SliderW*, void*);
  static void cb_ring_LRc(SliderW*, void*);
public:
  SliderW *ring_input;
private:
  void cb_ring_input_i(SliderW*, void*);
  static void cb_ring_input(SliderW*, void*);
public:
  SliderW *ring_level;
private:
  void cb_ring_level_i(SliderW*, void*);
  static void cb_ring_level(SliderW*, void*);
public:
  SliderW *ring_pan;
private:
  void cb_ring_pan_i(SliderW*, void*);
  static void cb_ring_pan(SliderW*, void*);
public:
  Fl_Check_Button *ring_st;
private:
  void cb_ring_st_i(Fl_Check_Button*, void*);
  static void cb_ring_st(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ring_afreq;
private:
  void cb_ring_afreq_i(Fl_Check_Button*, void*);
  static void cb_ring_afreq(Fl_Check_Button*, void*);
public:
  SliderW *ring_depth;
private:
  void cb_ring_depth_i(SliderW*, void*);
  static void cb_ring_depth(SliderW*, void*);
public:
  SliderW *ring_freq;
private:
  void cb_ring_freq_i(SliderW*, void*);
  static void cb_ring_freq(SliderW*, void*);
public:
  SliderW *ring_sin;
private:
  void cb_ring_sin_i(SliderW*, void*);
  static void cb_ring_sin(SliderW*, void*);
public:
  SliderW *ring_tri;
private:
  void cb_ring_tri_i(SliderW*, void*);
  static void cb_ring_tri(SliderW*, void*);
public:
  SliderW *ring_saw;
private:
  void cb_ring_saw_i(SliderW*, void*);
  static void cb_ring_saw(SliderW*, void*);
public:
  SliderW *ring_squ;
private:
  void cb_ring_squ_i(SliderW*, void*);
  static void cb_ring_squ(SliderW*, void*);
public:
  Fl_Group *EXCITER;
  Fl_Light_Button *exciter_activar;
private:
  void cb_exciter_activar_i(Fl_Light_Button*, void*);
  static void cb_exciter_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *exciter_preset;
private:
  void cb_exciter_preset_i(Fl_Choice*, void*);
  static void cb_exciter_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_exciter_preset[];
public:
  SliderW *ex_Gain;
private:
  void cb_ex_Gain_i(SliderW*, void*);
  static void cb_ex_Gain(SliderW*, void*);
public:
  SliderW *ex_lfreq;
private:
  void cb_ex_lfreq_i(SliderW*, void*);
  static void cb_ex_lfreq(SliderW*, void*);
public:
  SliderW *ex_hfreq;
private:
  void cb_ex_hfreq_i(SliderW*, void*);
  static void cb_ex_hfreq(SliderW*, void*);
public:
  SliderW *ex_1;
private:
  void cb_ex_1_i(SliderW*, void*);
  static void cb_ex_1(SliderW*, void*);
public:
  SliderW *ex_2;
private:
  void cb_ex_2_i(SliderW*, void*);
  static void cb_ex_2(SliderW*, void*);
public:
  SliderW *ex_3;
private:
  void cb_ex_3_i(SliderW*, void*);
  static void cb_ex_3(SliderW*, void*);
public:
  SliderW *ex_4;
private:
  void cb_ex_4_i(SliderW*, void*);
  static void cb_ex_4(SliderW*, void*);
public:
  SliderW *ex_5;
private:
  void cb_ex_5_i(SliderW*, void*);
  static void cb_ex_5(SliderW*, void*);
public:
  SliderW *ex_6;
private:
  void cb_ex_6_i(SliderW*, void*);
  static void cb_ex_6(SliderW*, void*);
public:
  SliderW *ex_7;
private:
  void cb_ex_7_i(SliderW*, void*);
  static void cb_ex_7(SliderW*, void*);
public:
  SliderW *ex_8;
private:
  void cb_ex_8_i(SliderW*, void*);
  static void cb_ex_8(SliderW*, void*);
public:
  SliderW *ex_9;
private:
  void cb_ex_9_i(SliderW*, void*);
  static void cb_ex_9(SliderW*, void*);
public:
  SliderW *ex_10;
private:
  void cb_ex_10_i(SliderW*, void*);
  static void cb_ex_10(SliderW*, void*);
public:
  Fl_Group *MBDIST;
  Fl_Light_Button *mbdist_activar;
private:
  void cb_mbdist_activar_i(Fl_Light_Button*, void*);
  static void cb_mbdist_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *mbdist_preset;
private:
  void cb_mbdist_preset_i(Fl_Choice*, void*);
  static void cb_mbdist_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_mbdist_preset[];
public:
  SliderW *mbdist_WD;
private:
  void cb_mbdist_WD_i(SliderW*, void*);
  static void cb_mbdist_WD(SliderW*, void*);
public:
  SliderW *mbdist_LRc;
private:
  void cb_mbdist_LRc_i(SliderW*, void*);
  static void cb_mbdist_LRc(SliderW*, void*);
public:
  SliderW *mbdist_drive;
private:
  void cb_mbdist_drive_i(SliderW*, void*);
  static void cb_mbdist_drive(SliderW*, void*);
public:
  SliderW *mbdist_level;
private:
  void cb_mbdist_level_i(SliderW*, void*);
  static void cb_mbdist_level(SliderW*, void*);
public:
  SliderW *mbdist_volL;
private:
  void cb_mbdist_volL_i(SliderW*, void*);
  static void cb_mbdist_volL(SliderW*, void*);
public:
  SliderW *mbdist_volM;
private:
  void cb_mbdist_volM_i(SliderW*, void*);
  static void cb_mbdist_volM(SliderW*, void*);
public:
  SliderW *mbdist_volH;
private:
  void cb_mbdist_volH_i(SliderW*, void*);
  static void cb_mbdist_volH(SliderW*, void*);
public:
  SliderW *mbdist_cross1;
private:
  void cb_mbdist_cross1_i(SliderW*, void*);
  static void cb_mbdist_cross1(SliderW*, void*);
public:
  SliderW *mbdist_cross2;
private:
  void cb_mbdist_cross2_i(SliderW*, void*);
  static void cb_mbdist_cross2(SliderW*, void*);
public:
  Fl_Choice *mbdist_tipoL;
private:
  void cb_mbdist_tipoL_i(Fl_Choice*, void*);
  static void cb_mbdist_tipoL(Fl_Choice*, void*);
public:
  Fl_Choice *mbdist_tipoM;
private:
  void cb_mbdist_tipoM_i(Fl_Choice*, void*);
  static void cb_mbdist_tipoM(Fl_Choice*, void*);
public:
  Fl_Choice *mbdist_tipoH;
private:
  void cb_mbdist_tipoH_i(Fl_Choice*, void*);
  static void cb_mbdist_tipoH(Fl_Choice*, void*);
public:
  SliderW *mbdist_pan;
private:
  void cb_mbdist_pan_i(SliderW*, void*);
  static void cb_mbdist_pan(SliderW*, void*);
public:
  Fl_Check_Button *mbdist_st;
private:
  void cb_mbdist_st_i(Fl_Check_Button*, void*);
  static void cb_mbdist_st(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *mbdist_neg;
private:
  void cb_mbdist_neg_i(Fl_Check_Button*, void*);
  static void cb_mbdist_neg(Fl_Check_Button*, void*);
public:
  Fl_Group *ARPIE;
  Fl_Light_Button *arpie_activar;
private:
  void cb_arpie_activar_i(Fl_Light_Button*, void*);
  static void cb_arpie_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *arpie_preset;
private:
  void cb_arpie_preset_i(Fl_Choice*, void*);
  static void cb_arpie_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_arpie_preset[];
public:
  SliderW *arpie_WD;
private:
  void cb_arpie_WD_i(SliderW*, void*);
  static void cb_arpie_WD(SliderW*, void*);
public:
  SliderW *arpie_arpe;
private:
  void cb_arpie_arpe_i(SliderW*, void*);
  static void cb_arpie_arpe(SliderW*, void*);
public:
  SliderW *arpie_pan;
private:
  void cb_arpie_pan_i(SliderW*, void*);
  static void cb_arpie_pan(SliderW*, void*);
public:
  SliderW *arpie_delay;
private:
  void cb_arpie_delay_i(SliderW*, void*);
  static void cb_arpie_delay(SliderW*, void*);
public:
  Fl_Choice *arpie_subdiv;
private:
  void cb_arpie_subdiv_i(Fl_Choice*, void*);
  static void cb_arpie_subdiv(Fl_Choice*, void*);
  static Fl_Menu_Item menu_arpie_subdiv[];
public:
  SliderW *arpie_LRdl;
private:
  void cb_arpie_LRdl_i(SliderW*, void*);
  static void cb_arpie_LRdl(SliderW*, void*);
public:
  SliderW *arpie_LRc;
private:
  void cb_arpie_LRc_i(SliderW*, void*);
  static void cb_arpie_LRc(SliderW*, void*);
public:
  SliderW *arpie_fb;
private:
  void cb_arpie_fb_i(SliderW*, void*);
  static void cb_arpie_fb(SliderW*, void*);
public:
  SliderW *arpie_damp;
private:
  void cb_arpie_damp_i(SliderW*, void*);
  static void cb_arpie_damp(SliderW*, void*);
public:
  Fl_Counter *arpie_harm;
private:
  void cb_arpie_harm_i(Fl_Counter*, void*);
  static void cb_arpie_harm(Fl_Counter*, void*);
public:
  Fl_Choice *arpie_pattern;
private:
  void cb_arpie_pattern_i(Fl_Choice*, void*);
  static void cb_arpie_pattern(Fl_Choice*, void*);
  static Fl_Menu_Item menu_arpie_pattern[];
public:
  Fl_Group *EXPANDER;
  Fl_Light_Button *expander_activar;
private:
  void cb_expander_activar_i(Fl_Light_Button*, void*);
  static void cb_expander_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *expander_preset;
private:
  void cb_expander_preset_i(Fl_Choice*, void*);
  static void cb_expander_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_expander_preset[];
public:
  SliderW *expander_ATime;
private:
  void cb_expander_ATime_i(SliderW*, void*);
  static void cb_expander_ATime(SliderW*, void*);
public:
  SliderW *expander_RTime;
private:
  void cb_expander_RTime_i(SliderW*, void*);
  static void cb_expander_RTime(SliderW*, void*);
public:
  SliderW *expander_shape;
private:
  void cb_expander_shape_i(SliderW*, void*);
  static void cb_expander_shape(SliderW*, void*);
public:
  SliderW *expander_threshold;
private:
  void cb_expander_threshold_i(SliderW*, void*);
  static void cb_expander_threshold(SliderW*, void*);
public:
  SliderW *expander_level;
private:
  void cb_expander_level_i(SliderW*, void*);
  static void cb_expander_level(SliderW*, void*);
public:
  SliderW *expander_LPF;
private:
  void cb_expander_LPF_i(SliderW*, void*);
  static void cb_expander_LPF(SliderW*, void*);
public:
  SliderW *expander_HPF;
private:
  void cb_expander_HPF_i(SliderW*, void*);
  static void cb_expander_HPF(SliderW*, void*);
public:
  Fl_Group *SHUFFLE;
  Fl_Light_Button *shuffle_activar;
private:
  void cb_shuffle_activar_i(Fl_Light_Button*, void*);
  static void cb_shuffle_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *shuffle_preset;
private:
  void cb_shuffle_preset_i(Fl_Choice*, void*);
  static void cb_shuffle_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shuffle_preset[];
public:
  SliderW *shuffle_WD;
private:
  void cb_shuffle_WD_i(SliderW*, void*);
  static void cb_shuffle_WD(SliderW*, void*);
public:
  SliderW *shuffle_cross1;
private:
  void cb_shuffle_cross1_i(SliderW*, void*);
  static void cb_shuffle_cross1(SliderW*, void*);
public:
  SliderW *shuffle_volL;
private:
  void cb_shuffle_volL_i(SliderW*, void*);
  static void cb_shuffle_volL(SliderW*, void*);
public:
  SliderW *shuffle_cross2;
private:
  void cb_shuffle_cross2_i(SliderW*, void*);
  static void cb_shuffle_cross2(SliderW*, void*);
public:
  SliderW *shuffle_volML;
private:
  void cb_shuffle_volML_i(SliderW*, void*);
  static void cb_shuffle_volML(SliderW*, void*);
public:
  SliderW *shuffle_cross3;
private:
  void cb_shuffle_cross3_i(SliderW*, void*);
  static void cb_shuffle_cross3(SliderW*, void*);
public:
  SliderW *shuffle_volMH;
private:
  void cb_shuffle_volMH_i(SliderW*, void*);
  static void cb_shuffle_volMH(SliderW*, void*);
public:
  SliderW *shuffle_cross4;
private:
  void cb_shuffle_cross4_i(SliderW*, void*);
  static void cb_shuffle_cross4(SliderW*, void*);
public:
  SliderW *shuffle_volH;
private:
  void cb_shuffle_volH_i(SliderW*, void*);
  static void cb_shuffle_volH(SliderW*, void*);
public:
  SliderW *shuffle_Q;
private:
  void cb_shuffle_Q_i(SliderW*, void*);
  static void cb_shuffle_Q(SliderW*, void*);
public:
  Fl_Check_Button *shuffle_E;
private:
  void cb_shuffle_E_i(Fl_Check_Button*, void*);
  static void cb_shuffle_E(Fl_Check_Button*, void*);
public:
  Fl_Group *SYNTHFILTER;
  Fl_Light_Button *synthfilter_activar;
private:
  void cb_synthfilter_activar_i(Fl_Light_Button*, void*);
  static void cb_synthfilter_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *synthfilter_preset;
private:
  void cb_synthfilter_preset_i(Fl_Choice*, void*);
  static void cb_synthfilter_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_synthfilter_preset[];
public:
  SliderW *synthfilter_WD;
private:
  void cb_synthfilter_WD_i(SliderW*, void*);
  static void cb_synthfilter_WD(SliderW*, void*);
public:
  SliderW *synthfilter_Distort;
private:
  void cb_synthfilter_Distort_i(SliderW*, void*);
  static void cb_synthfilter_Distort(SliderW*, void*);
public:
  SliderW *synthfilter_freq;
private:
  void cb_synthfilter_freq_i(SliderW*, void*);
  static void cb_synthfilter_freq(SliderW*, void*);
public:
  Fl_Choice *synthfilter_lfotype;
private:
  void cb_synthfilter_lfotype_i(Fl_Choice*, void*);
  static void cb_synthfilter_lfotype(Fl_Choice*, void*);
public:
  Fl_Check_Button *synthfilter_subs;
private:
  void cb_synthfilter_subs_i(Fl_Check_Button*, void*);
  static void cb_synthfilter_subs(Fl_Check_Button*, void*);
public:
  SliderW *synthfilter_stdf;
private:
  void cb_synthfilter_stdf_i(SliderW*, void*);
  static void cb_synthfilter_stdf(SliderW*, void*);
public:
  SliderW *synthfilter_width;
private:
  void cb_synthfilter_width_i(SliderW*, void*);
  static void cb_synthfilter_width(SliderW*, void*);
public:
  SliderW *synthfilter_fb;
private:
  void cb_synthfilter_fb_i(SliderW*, void*);
  static void cb_synthfilter_fb(SliderW*, void*);
public:
  Fl_Counter *synthfilter_Lstages;
private:
  void cb_synthfilter_Lstages_i(Fl_Counter*, void*);
  static void cb_synthfilter_Lstages(Fl_Counter*, void*);
public:
  Fl_Counter *synthfilter_Hstages;
private:
  void cb_synthfilter_Hstages_i(Fl_Counter*, void*);
  static void cb_synthfilter_Hstages(Fl_Counter*, void*);
public:
  SliderW *synthfilter_dpth;
private:
  void cb_synthfilter_dpth_i(SliderW*, void*);
  static void cb_synthfilter_dpth(SliderW*, void*);
public:
  SliderW *synthfilter_EnvSens;
private:
  void cb_synthfilter_EnvSens_i(SliderW*, void*);
  static void cb_synthfilter_EnvSens(SliderW*, void*);
public:
  SliderW *synthfilter_ATime;
private:
  void cb_synthfilter_ATime_i(SliderW*, void*);
  static void cb_synthfilter_ATime(SliderW*, void*);
public:
  SliderW *synthfilter_RTime;
private:
  void cb_synthfilter_RTime_i(SliderW*, void*);
  static void cb_synthfilter_RTime(SliderW*, void*);
public:
  SliderW *synthfilter_Offset;
private:
  void cb_synthfilter_Offset_i(SliderW*, void*);
  static void cb_synthfilter_Offset(SliderW*, void*);
public:
  Fl_Group *MBVVOL;
  Fl_Light_Button *mbvvol_activar;
private:
  void cb_mbvvol_activar_i(Fl_Light_Button*, void*);
  static void cb_mbvvol_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *mbvvol_preset;
private:
  void cb_mbvvol_preset_i(Fl_Choice*, void*);
  static void cb_mbvvol_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_mbvvol_preset[];
public:
  SliderW *mbvvol_WD;
private:
  void cb_mbvvol_WD_i(SliderW*, void*);
  static void cb_mbvvol_WD(SliderW*, void*);
public:
  SliderW *mbvvol_freq1;
private:
  void cb_mbvvol_freq1_i(SliderW*, void*);
  static void cb_mbvvol_freq1(SliderW*, void*);
public:
  Fl_Choice *mbvvol_lfotype1;
private:
  void cb_mbvvol_lfotype1_i(Fl_Choice*, void*);
  static void cb_mbvvol_lfotype1(Fl_Choice*, void*);
public:
  SliderW *mbvvol_stdf1;
private:
  void cb_mbvvol_stdf1_i(SliderW*, void*);
  static void cb_mbvvol_stdf1(SliderW*, void*);
public:
  SliderW *mbvvol_freq2;
private:
  void cb_mbvvol_freq2_i(SliderW*, void*);
  static void cb_mbvvol_freq2(SliderW*, void*);
public:
  Fl_Choice *mbvvol_lfotype2;
private:
  void cb_mbvvol_lfotype2_i(Fl_Choice*, void*);
  static void cb_mbvvol_lfotype2(Fl_Choice*, void*);
public:
  SliderW *mbvvol_stdf2;
private:
  void cb_mbvvol_stdf2_i(SliderW*, void*);
  static void cb_mbvvol_stdf2(SliderW*, void*);
public:
  SliderW *mbvvol_cross1;
private:
  void cb_mbvvol_cross1_i(SliderW*, void*);
  static void cb_mbvvol_cross1(SliderW*, void*);
public:
  SliderW *mbvvol_cross2;
private:
  void cb_mbvvol_cross2_i(SliderW*, void*);
  static void cb_mbvvol_cross2(SliderW*, void*);
public:
  SliderW *mbvvol_cross3;
private:
  void cb_mbvvol_cross3_i(SliderW*, void*);
  static void cb_mbvvol_cross3(SliderW*, void*);
public:
  Fl_Choice *mbvvol_combi;
private:
  void cb_mbvvol_combi_i(Fl_Choice*, void*);
  static void cb_mbvvol_combi(Fl_Choice*, void*);
  static Fl_Menu_Item menu_mbvvol_combi[];
public:
  Fl_Group *CONVOLOTRON;
  Fl_Light_Button *convo_activar;
private:
  void cb_convo_activar_i(Fl_Light_Button*, void*);
  static void cb_convo_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *convo_preset;
private:
  void cb_convo_preset_i(Fl_Choice*, void*);
  static void cb_convo_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_convo_preset[];
public:
  SliderW *convo_WD;
private:
  void cb_convo_WD_i(SliderW*, void*);
  static void cb_convo_WD(SliderW*, void*);
public:
  SliderW *convo_pan;
private:
  void cb_convo_pan_i(SliderW*, void*);
  static void cb_convo_pan(SliderW*, void*);
public:
  SliderW *convo_level;
private:
  void cb_convo_level_i(SliderW*, void*);
  static void cb_convo_level(SliderW*, void*);
public:
  SliderW *convo_damp;
private:
  void cb_convo_damp_i(SliderW*, void*);
  static void cb_convo_damp(SliderW*, void*);
public:
  SliderW *convo_fb;
private:
  void cb_convo_fb_i(SliderW*, void*);
  static void cb_convo_fb(SliderW*, void*);
public:
  SliderW *convo_length;
private:
  void cb_convo_length_i(SliderW*, void*);
  static void cb_convo_length(SliderW*, void*);
public:
  Fl_Check_Button *convo_user;
private:
  void cb_convo_user_i(Fl_Check_Button*, void*);
  static void cb_convo_user(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *convo_safe;
private:
  void cb_convo_safe_i(Fl_Check_Button*, void*);
  static void cb_convo_safe(Fl_Check_Button*, void*);
public:
  Fl_Button *B_wav;
private:
  void cb_B_wav_i(Fl_Button*, void*);
  static void cb_B_wav(Fl_Button*, void*);
public:
  Fl_Choice *convo_fnum;
private:
  void cb_convo_fnum_i(Fl_Choice*, void*);
  static void cb_convo_fnum(Fl_Choice*, void*);
  static Fl_Menu_Item menu_convo_fnum[];
public:
  Fl_Group *LOOPER;
  Fl_Light_Button *looper_activar;
private:
  void cb_looper_activar_i(Fl_Light_Button*, void*);
  static void cb_looper_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *looper_preset;
private:
  void cb_looper_preset_i(Fl_Choice*, void*);
  static void cb_looper_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_looper_preset[];
public:
  SliderW *looper_WD;
private:
  void cb_looper_WD_i(SliderW*, void*);
  static void cb_looper_WD(SliderW*, void*);
public:
  SliderW *looper_level1;
private:
  void cb_looper_level1_i(SliderW*, void*);
  static void cb_looper_level1(SliderW*, void*);
public:
  SliderW *looper_level2;
private:
  void cb_looper_level2_i(SliderW*, void*);
  static void cb_looper_level2(SliderW*, void*);
public:
  SliderW *looper_Tempo;
private:
  void cb_looper_Tempo_i(SliderW*, void*);
  static void cb_looper_Tempo(SliderW*, void*);
public:
  Fl_Choice *looper_bar;
private:
  void cb_looper_bar_i(Fl_Choice*, void*);
  static void cb_looper_bar(Fl_Choice*, void*);
  static Fl_Menu_Item menu_looper_bar[];
public:
  Fl_Choice *looper_ms;
private:
  void cb_looper_ms_i(Fl_Choice*, void*);
  static void cb_looper_ms(Fl_Choice*, void*);
  static Fl_Menu_Item menu_looper_ms[];
public:
  Fl_Check_Button *looper_rv;
private:
  void cb_looper_rv_i(Fl_Check_Button*, void*);
  static void cb_looper_rv(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *looper_ap;
private:
  void cb_looper_ap_i(Fl_Check_Button*, void*);
  static void cb_looper_ap(Fl_Check_Button*, void*);
public:
  Fl_Box *Box_Play;
  Fl_Box *Box_P;
  Fl_Button *looper_play;
private:
  void cb_looper_play_i(Fl_Button*, void*);
  static void cb_looper_play(Fl_Button*, void*);
public:
  Fl_Button *looper_stop;
private:
  void cb_looper_stop_i(Fl_Button*, void*);
  static void cb_looper_stop(Fl_Button*, void*);
public:
  Fl_Button *looper_record;
private:
  void cb_looper_record_i(Fl_Button*, void*);
  static void cb_looper_record(Fl_Button*, void*);
public:
  Fl_Check_Button *looper_r1;
private:
  void cb_looper_r1_i(Fl_Check_Button*, void*);
  static void cb_looper_r1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *looper_r2;
private:
  void cb_looper_r2_i(Fl_Check_Button*, void*);
  static void cb_looper_r2(Fl_Check_Button*, void*);
public:
  Fl_Button *looper_t1;
private:
  void cb_looper_t1_i(Fl_Button*, void*);
  static void cb_looper_t1(Fl_Button*, void*);
public:
  Fl_Button *looper_t2;
private:
  void cb_looper_t2_i(Fl_Button*, void*);
  static void cb_looper_t2(Fl_Button*, void*);
public:
  Fl_Check_Button *looper_lnk;
private:
  void cb_looper_lnk_i(Fl_Check_Button*, void*);
  static void cb_looper_lnk(Fl_Check_Button*, void*);
public:
  Fl_Button *looper_clear;
private:
  void cb_looper_clear_i(Fl_Button*, void*);
  static void cb_looper_clear(Fl_Button*, void*);
public:
  Fl_Check_Button *looper_mt;
private:
  void cb_looper_mt_i(Fl_Check_Button*, void*);
  static void cb_looper_mt(Fl_Check_Button*, void*);
public:
  Fl_Box *L_TimePos;
  Fl_Group *RYANWAH;
  Fl_Light_Button *ryanwah_activar;
private:
  void cb_ryanwah_activar_i(Fl_Light_Button*, void*);
  static void cb_ryanwah_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *ryanwah_preset;
private:
  void cb_ryanwah_preset_i(Fl_Choice*, void*);
  static void cb_ryanwah_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_ryanwah_preset[];
public:
  SliderW *ryanwah_WD;
private:
  void cb_ryanwah_WD_i(SliderW*, void*);
  static void cb_ryanwah_WD(SliderW*, void*);
public:
  Fl_Check_Button *ryanwah_qm;
private:
  void cb_ryanwah_qm_i(Fl_Check_Button*, void*);
  static void cb_ryanwah_qm(Fl_Check_Button*, void*);
public:
  SliderW *ryanwah_lp;
private:
  void cb_ryanwah_lp_i(SliderW*, void*);
  static void cb_ryanwah_lp(SliderW*, void*);
public:
  Fl_Check_Button *ryanwah_nat;
private:
  void cb_ryanwah_nat_i(Fl_Check_Button*, void*);
  static void cb_ryanwah_nat(Fl_Check_Button*, void*);
public:
  SliderW *ryanwah_bp;
private:
  void cb_ryanwah_bp_i(SliderW*, void*);
  static void cb_ryanwah_bp(SliderW*, void*);
public:
  SliderW *ryanwah_hp;
private:
  void cb_ryanwah_hp_i(SliderW*, void*);
  static void cb_ryanwah_hp(SliderW*, void*);
public:
  Fl_Counter *svfilter_stages;
private:
  void cb_svfilter_stages_i(Fl_Counter*, void*);
  static void cb_svfilter_stages(Fl_Counter*, void*);
public:
  Fl_Choice *ryanwah_lfotype;
private:
  void cb_ryanwah_lfotype_i(Fl_Choice*, void*);
  static void cb_ryanwah_lfotype(Fl_Choice*, void*);
public:
  SliderW *ryanwah_dpth;
private:
  void cb_ryanwah_dpth_i(SliderW*, void*);
  static void cb_ryanwah_dpth(SliderW*, void*);
public:
  SliderW *ryanwah_freq;
private:
  void cb_ryanwah_freq_i(SliderW*, void*);
  static void cb_ryanwah_freq(SliderW*, void*);
public:
  SliderW *ryanwah_q;
private:
  void cb_ryanwah_q_i(SliderW*, void*);
  static void cb_ryanwah_q(SliderW*, void*);
public:
  SliderW *ryanwah_rng;
private:
  void cb_ryanwah_rng_i(SliderW*, void*);
  static void cb_ryanwah_rng(SliderW*, void*);
public:
  SliderW *ryanwah_ampsnsinv;
private:
  void cb_ryanwah_ampsnsinv_i(SliderW*, void*);
  static void cb_ryanwah_ampsnsinv(SliderW*, void*);
public:
  SliderW *ryanwah_ampsns;
private:
  void cb_ryanwah_ampsns_i(SliderW*, void*);
  static void cb_ryanwah_ampsns(SliderW*, void*);
public:
  SliderW *ryanwah_smooth;
private:
  void cb_ryanwah_smooth_i(SliderW*, void*);
  static void cb_ryanwah_smooth(SliderW*, void*);
public:
  Fl_Group *RBECHO;
  Fl_Light_Button *rbecho_activar;
private:
  void cb_rbecho_activar_i(Fl_Light_Button*, void*);
  static void cb_rbecho_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *rbecho_preset;
private:
  void cb_rbecho_preset_i(Fl_Choice*, void*);
  static void cb_rbecho_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_rbecho_preset[];
public:
  SliderW *rbecho_WD;
private:
  void cb_rbecho_WD_i(SliderW*, void*);
  static void cb_rbecho_WD(SliderW*, void*);
public:
  SliderW *rbecho_RV;
private:
  void cb_rbecho_RV_i(SliderW*, void*);
  static void cb_rbecho_RV(SliderW*, void*);
public:
  SliderW *rbecho_pan;
private:
  void cb_rbecho_pan_i(SliderW*, void*);
  static void cb_rbecho_pan(SliderW*, void*);
public:
  SliderW *rbecho_delay;
private:
  void cb_rbecho_delay_i(SliderW*, void*);
  static void cb_rbecho_delay(SliderW*, void*);
public:
  SliderW *rbecho_LRdl;
private:
  void cb_rbecho_LRdl_i(SliderW*, void*);
  static void cb_rbecho_LRdl(SliderW*, void*);
public:
  SliderW *rbecho_fb;
private:
  void cb_rbecho_fb_i(SliderW*, void*);
  static void cb_rbecho_fb(SliderW*, void*);
public:
  Fl_Choice *rbecho_subdiv;
private:
  void cb_rbecho_subdiv_i(Fl_Choice*, void*);
  static void cb_rbecho_subdiv(Fl_Choice*, void*);
public:
  SliderW *rbecho_damp;
private:
  void cb_rbecho_damp_i(SliderW*, void*);
  static void cb_rbecho_damp(SliderW*, void*);
public:
  SliderW *rbecho_es;
private:
  void cb_rbecho_es_i(SliderW*, void*);
  static void cb_rbecho_es(SliderW*, void*);
public:
  SliderW *rbecho_angle;
private:
  void cb_rbecho_angle_i(SliderW*, void*);
  static void cb_rbecho_angle(SliderW*, void*);
public:
  Fl_Group *COILCRAFTER;
  Fl_Light_Button *coil_activar;
private:
  void cb_coil_activar_i(Fl_Light_Button*, void*);
  static void cb_coil_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *coil_preset;
private:
  void cb_coil_preset_i(Fl_Choice*, void*);
  static void cb_coil_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_coil_preset[];
public:
  SliderW *coil_WD;
private:
  void cb_coil_WD_i(SliderW*, void*);
  static void cb_coil_WD(SliderW*, void*);
public:
  SliderW *coil_tone;
private:
  void cb_coil_tone_i(SliderW*, void*);
  static void cb_coil_tone(SliderW*, void*);
public:
  Fl_Choice *coil_origin;
private:
  void cb_coil_origin_i(Fl_Choice*, void*);
  static void cb_coil_origin(Fl_Choice*, void*);
  static Fl_Menu_Item menu_coil_origin[];
public:
  SliderW *coil_freq1;
private:
  void cb_coil_freq1_i(SliderW*, void*);
  static void cb_coil_freq1(SliderW*, void*);
public:
  SliderW *coil_q1;
private:
  void cb_coil_q1_i(SliderW*, void*);
  static void cb_coil_q1(SliderW*, void*);
public:
  Fl_Choice *coil_destiny;
private:
  void cb_coil_destiny_i(Fl_Choice*, void*);
  static void cb_coil_destiny(Fl_Choice*, void*);
public:
  SliderW *coil_freq2;
private:
  void cb_coil_freq2_i(SliderW*, void*);
  static void cb_coil_freq2(SliderW*, void*);
public:
  SliderW *coil_q2;
private:
  void cb_coil_q2_i(SliderW*, void*);
  static void cb_coil_q2(SliderW*, void*);
public:
  Fl_Check_Button *coil_mode;
private:
  void cb_coil_mode_i(Fl_Check_Button*, void*);
  static void cb_coil_mode(Fl_Check_Button*, void*);
public:
  Fl_Group *SHELFBOOST;
  Fl_Light_Button *shelf_activar;
private:
  void cb_shelf_activar_i(Fl_Light_Button*, void*);
  static void cb_shelf_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *shelf_preset;
private:
  void cb_shelf_preset_i(Fl_Choice*, void*);
  static void cb_shelf_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shelf_preset[];
public:
  SliderW *shelf_gain;
private:
  void cb_shelf_gain_i(SliderW*, void*);
  static void cb_shelf_gain(SliderW*, void*);
public:
  SliderW *shelf_level;
private:
  void cb_shelf_level_i(SliderW*, void*);
  static void cb_shelf_level(SliderW*, void*);
public:
  SliderW *shelf_freq1;
private:
  void cb_shelf_freq1_i(SliderW*, void*);
  static void cb_shelf_freq1(SliderW*, void*);
public:
  SliderW *shelf_q1;
private:
  void cb_shelf_q1_i(SliderW*, void*);
  static void cb_shelf_q1(SliderW*, void*);
public:
  Fl_Check_Button *shelf_mode;
private:
  void cb_shelf_mode_i(Fl_Check_Button*, void*);
  static void cb_shelf_mode(Fl_Check_Button*, void*);
public:
  Fl_Group *VOCODER;
  Fl_Light_Button *vo_activar;
private:
  void cb_vo_activar_i(Fl_Light_Button*, void*);
  static void cb_vo_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *vo_preset;
private:
  void cb_vo_preset_i(Fl_Choice*, void*);
  static void cb_vo_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_vo_preset[];
public:
  SliderW *vo_WD;
private:
  void cb_vo_WD_i(SliderW*, void*);
  static void cb_vo_WD(SliderW*, void*);
public:
  SliderW *vo_pan;
private:
  void cb_vo_pan_i(SliderW*, void*);
  static void cb_vo_pan(SliderW*, void*);
public:
  SliderW *vo_input;
private:
  void cb_vo_input_i(SliderW*, void*);
  static void cb_vo_input(SliderW*, void*);
public:
  SliderW *vo_mu;
private:
  void cb_vo_mu_i(SliderW*, void*);
  static void cb_vo_mu(SliderW*, void*);
public:
  SliderW *vo_q;
private:
  void cb_vo_q_i(SliderW*, void*);
  static void cb_vo_q(SliderW*, void*);
public:
  SliderW *vo_ring;
private:
  void cb_vo_ring_i(SliderW*, void*);
  static void cb_vo_ring(SliderW*, void*);
public:
  SliderW *vo_level;
private:
  void cb_vo_level_i(SliderW*, void*);
  static void cb_vo_level(SliderW*, void*);
public:
  NewVum *vu_vu;
  Fl_Group *SUSTAINER;
  Fl_Light_Button *sus_activar;
private:
  void cb_sus_activar_i(Fl_Light_Button*, void*);
  static void cb_sus_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *sus_preset;
private:
  void cb_sus_preset_i(Fl_Choice*, void*);
  static void cb_sus_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_sus_preset[];
public:
  SliderW *sus_gain;
private:
  void cb_sus_gain_i(SliderW*, void*);
  static void cb_sus_gain(SliderW*, void*);
public:
  SliderW *sus_sus;
private:
  void cb_sus_sus_i(SliderW*, void*);
  static void cb_sus_sus(SliderW*, void*);
public:
  Fl_Group *SEQUENCE;
  Fl_Light_Button *seq_activar;
private:
  void cb_seq_activar_i(Fl_Light_Button*, void*);
  static void cb_seq_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *seq_preset;
private:
  void cb_seq_preset_i(Fl_Choice*, void*);
  static void cb_seq_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_seq_preset[];
public:
  SliderW *seq_WD;
private:
  void cb_seq_WD_i(SliderW*, void*);
  static void cb_seq_WD(SliderW*, void*);
public:
  SliderW *seq_1;
private:
  void cb_seq_1_i(SliderW*, void*);
  static void cb_seq_1(SliderW*, void*);
public:
  SliderW *seq_2;
private:
  void cb_seq_2_i(SliderW*, void*);
  static void cb_seq_2(SliderW*, void*);
public:
  SliderW *seq_3;
private:
  void cb_seq_3_i(SliderW*, void*);
  static void cb_seq_3(SliderW*, void*);
public:
  SliderW *seq_4;
private:
  void cb_seq_4_i(SliderW*, void*);
  static void cb_seq_4(SliderW*, void*);
public:
  SliderW *seq_5;
private:
  void cb_seq_5_i(SliderW*, void*);
  static void cb_seq_5(SliderW*, void*);
public:
  SliderW *seq_6;
private:
  void cb_seq_6_i(SliderW*, void*);
  static void cb_seq_6(SliderW*, void*);
public:
  SliderW *seq_7;
private:
  void cb_seq_7_i(SliderW*, void*);
  static void cb_seq_7(SliderW*, void*);
public:
  SliderW *seq_8;
private:
  void cb_seq_8_i(SliderW*, void*);
  static void cb_seq_8(SliderW*, void*);
public:
  SliderW *seq_tempo;
private:
  void cb_seq_tempo_i(SliderW*, void*);
  static void cb_seq_tempo(SliderW*, void*);
public:
  SliderW *seq_q;
private:
  void cb_seq_q_i(SliderW*, void*);
  static void cb_seq_q(SliderW*, void*);
public:
  SliderW *seq_stdf;
private:
  void cb_seq_stdf_i(SliderW*, void*);
  static void cb_seq_stdf(SliderW*, void*);
public:
  Fl_Check_Button *seq_amp;
private:
  void cb_seq_amp_i(Fl_Check_Button*, void*);
  static void cb_seq_amp(Fl_Check_Button*, void*);
public:
  Fl_Choice *seq_mode;
private:
  void cb_seq_mode_i(Fl_Choice*, void*);
  static void cb_seq_mode(Fl_Choice*, void*);
  static Fl_Menu_Item menu_seq_mode[];
public:
  Fl_Counter *seq_range;
private:
  void cb_seq_range_i(Fl_Counter*, void*);
  static void cb_seq_range(Fl_Counter*, void*);
public:
  Fl_Group *SHIFTER;
  Fl_Light_Button *shifter_activar;
private:
  void cb_shifter_activar_i(Fl_Light_Button*, void*);
  static void cb_shifter_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *shifter_preset;
private:
  void cb_shifter_preset_i(Fl_Choice*, void*);
  static void cb_shifter_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shifter_preset[];
public:
  SliderW *shifter_WD;
private:
  void cb_shifter_WD_i(SliderW*, void*);
  static void cb_shifter_WD(SliderW*, void*);
public:
  SliderW *shifter_int;
private:
  void cb_shifter_int_i(SliderW*, void*);
  static void cb_shifter_int(SliderW*, void*);
public:
  SliderW *shifter_gain;
private:
  void cb_shifter_gain_i(SliderW*, void*);
  static void cb_shifter_gain(SliderW*, void*);
public:
  SliderW *shifter_pan;
private:
  void cb_shifter_pan_i(SliderW*, void*);
  static void cb_shifter_pan(SliderW*, void*);
public:
  SliderW *shifter_attack;
private:
  void cb_shifter_attack_i(SliderW*, void*);
  static void cb_shifter_attack(SliderW*, void*);
public:
  SliderW *shifter_decay;
private:
  void cb_shifter_decay_i(SliderW*, void*);
  static void cb_shifter_decay(SliderW*, void*);
public:
  SliderW *shifter_thre;
private:
  void cb_shifter_thre_i(SliderW*, void*);
  static void cb_shifter_thre(SliderW*, void*);
public:
  Fl_Check_Button *shifter_ud;
private:
  void cb_shifter_ud_i(Fl_Check_Button*, void*);
  static void cb_shifter_ud(Fl_Check_Button*, void*);
public:
  SliderW *shifter_whammy;
private:
  void cb_shifter_whammy_i(SliderW*, void*);
  static void cb_shifter_whammy(SliderW*, void*);
public:
  Fl_Choice *shifter_mode;
private:
  void cb_shifter_mode_i(Fl_Choice*, void*);
  static void cb_shifter_mode(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shifter_mode[];
public:
  Fl_Group *STOMPBOX;
  Fl_Light_Button *stomp_activar;
private:
  void cb_stomp_activar_i(Fl_Light_Button*, void*);
  static void cb_stomp_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *stomp_preset;
private:
  void cb_stomp_preset_i(Fl_Choice*, void*);
  static void cb_stomp_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_stomp_preset[];
public:
  SliderW *stomp_WD;
private:
  void cb_stomp_WD_i(SliderW*, void*);
  static void cb_stomp_WD(SliderW*, void*);
public:
  SliderW *stomp_gain;
private:
  void cb_stomp_gain_i(SliderW*, void*);
  static void cb_stomp_gain(SliderW*, void*);
public:
  SliderW *stomp_low;
private:
  void cb_stomp_low_i(SliderW*, void*);
  static void cb_stomp_low(SliderW*, void*);
public:
  SliderW *stomp_mid;
private:
  void cb_stomp_mid_i(SliderW*, void*);
  static void cb_stomp_mid(SliderW*, void*);
public:
  SliderW *stomp_high;
private:
  void cb_stomp_high_i(SliderW*, void*);
  static void cb_stomp_high(SliderW*, void*);
public:
  Fl_Choice *stomp_mode;
private:
  void cb_stomp_mode_i(Fl_Choice*, void*);
  static void cb_stomp_mode(Fl_Choice*, void*);
  static Fl_Menu_Item menu_stomp_mode[];
public:
  Fl_Group *REVERBTRON;
  Fl_Light_Button *revtron_activar;
private:
  void cb_revtron_activar_i(Fl_Light_Button*, void*);
  static void cb_revtron_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *revtron_preset;
private:
  void cb_revtron_preset_i(Fl_Choice*, void*);
  static void cb_revtron_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revtron_preset[];
public:
  SliderW *revtron_WD;
private:
  void cb_revtron_WD_i(SliderW*, void*);
  static void cb_revtron_WD(SliderW*, void*);
public:
  SliderW *revtron_pan;
private:
  void cb_revtron_pan_i(SliderW*, void*);
  static void cb_revtron_pan(SliderW*, void*);
public:
  SliderW *revtron_level;
private:
  void cb_revtron_level_i(SliderW*, void*);
  static void cb_revtron_level(SliderW*, void*);
public:
  SliderW *revtron_damp;
private:
  void cb_revtron_damp_i(SliderW*, void*);
  static void cb_revtron_damp(SliderW*, void*);
public:
  SliderW *revtron_fb;
private:
  void cb_revtron_fb_i(SliderW*, void*);
  static void cb_revtron_fb(SliderW*, void*);
public:
  SliderW *revtron_length;
private:
  void cb_revtron_length_i(SliderW*, void*);
  static void cb_revtron_length(SliderW*, void*);
public:
  SliderW *revtron_strech;
private:
  void cb_revtron_strech_i(SliderW*, void*);
  static void cb_revtron_strech(SliderW*, void*);
public:
  SliderW *revtron_idelay;
private:
  void cb_revtron_idelay_i(SliderW*, void*);
  static void cb_revtron_idelay(SliderW*, void*);
public:
  SliderW *revtron_fade;
private:
  void cb_revtron_fade_i(SliderW*, void*);
  static void cb_revtron_fade(SliderW*, void*);
public:
  SliderW *revtron_HPF;
private:
  void cb_revtron_HPF_i(SliderW*, void*);
  static void cb_revtron_HPF(SliderW*, void*);
public:
  SliderW *revtron_LPF;
private:
  void cb_revtron_LPF_i(SliderW*, void*);
  static void cb_revtron_LPF(SliderW*, void*);
public:
  Fl_Check_Button *revtron_rv;
private:
  void cb_revtron_rv_i(Fl_Check_Button*, void*);
  static void cb_revtron_rv(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *revtron_es;
private:
  void cb_revtron_es_i(Fl_Check_Button*, void*);
  static void cb_revtron_es(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *revtron_safe;
private:
  void cb_revtron_safe_i(Fl_Check_Button*, void*);
  static void cb_revtron_safe(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *revtron_user;
private:
  void cb_revtron_user_i(Fl_Check_Button*, void*);
  static void cb_revtron_user(Fl_Check_Button*, void*);
public:
  Fl_Button *B_rvb;
private:
  void cb_B_rvb_i(Fl_Button*, void*);
  static void cb_B_rvb(Fl_Button*, void*);
public:
  Fl_Choice *revtron_fnum;
private:
  void cb_revtron_fnum_i(Fl_Choice*, void*);
  static void cb_revtron_fnum(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revtron_fnum[];
public:
  Fl_Group *ECHOTRON;
  Fl_Light_Button *echotron_activar;
private:
  void cb_echotron_activar_i(Fl_Light_Button*, void*);
  static void cb_echotron_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *echotron_preset;
private:
  void cb_echotron_preset_i(Fl_Choice*, void*);
  static void cb_echotron_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echotron_preset[];
public:
  SliderW *echotron_WD;
private:
  void cb_echotron_WD_i(SliderW*, void*);
  static void cb_echotron_WD(SliderW*, void*);
public:
  SliderW *echotron_pan;
private:
  void cb_echotron_pan_i(SliderW*, void*);
  static void cb_echotron_pan(SliderW*, void*);
public:
  SliderW *echotron_tempo;
private:
  void cb_echotron_tempo_i(SliderW*, void*);
  static void cb_echotron_tempo(SliderW*, void*);
public:
  SliderW *echotron_damp;
private:
  void cb_echotron_damp_i(SliderW*, void*);
  static void cb_echotron_damp(SliderW*, void*);
public:
  SliderW *echotron_fb;
private:
  void cb_echotron_fb_i(SliderW*, void*);
  static void cb_echotron_fb(SliderW*, void*);
public:
  SliderW *echotron_lrcross;
private:
  void cb_echotron_lrcross_i(SliderW*, void*);
  static void cb_echotron_lrcross(SliderW*, void*);
public:
  SliderW *echotron_width;
private:
  void cb_echotron_width_i(SliderW*, void*);
  static void cb_echotron_width(SliderW*, void*);
public:
  SliderW *echotron_deep;
private:
  void cb_echotron_deep_i(SliderW*, void*);
  static void cb_echotron_deep(SliderW*, void*);
public:
  SliderW *echotron_stdf;
private:
  void cb_echotron_stdf_i(SliderW*, void*);
  static void cb_echotron_stdf(SliderW*, void*);
public:
  Fl_Check_Button *echotron_af;
private:
  void cb_echotron_af_i(Fl_Check_Button*, void*);
  static void cb_echotron_af(Fl_Check_Button*, void*);
public:
  Fl_Choice *echotron_lfotype;
private:
  void cb_echotron_lfotype_i(Fl_Choice*, void*);
  static void cb_echotron_lfotype(Fl_Choice*, void*);
public:
  Fl_Check_Button *echotron_mf;
private:
  void cb_echotron_mf_i(Fl_Check_Button*, void*);
  static void cb_echotron_mf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *echotron_md;
private:
  void cb_echotron_md_i(Fl_Check_Button*, void*);
  static void cb_echotron_md(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *echotron_user;
private:
  void cb_echotron_user_i(Fl_Check_Button*, void*);
  static void cb_echotron_user(Fl_Check_Button*, void*);
public:
  Fl_Button *B_ech;
private:
  void cb_B_ech_i(Fl_Button*, void*);
  static void cb_B_ech(Fl_Button*, void*);
public:
  Fl_Counter *echotron_length;
private:
  void cb_echotron_length_i(Fl_Counter*, void*);
  static void cb_echotron_length(Fl_Counter*, void*);
public:
  Fl_Choice *echotron_fnum;
private:
  void cb_echotron_fnum_i(Fl_Choice*, void*);
  static void cb_echotron_fnum(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echotron_fnum[];
public:
  Fl_Group *SHAR;
  Fl_Light_Button *shar_activar;
private:
  void cb_shar_activar_i(Fl_Light_Button*, void*);
  static void cb_shar_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *shar_preset;
private:
  void cb_shar_preset_i(Fl_Choice*, void*);
  static void cb_shar_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shar_preset[];
public:
  SliderW *shar_WD;
private:
  void cb_shar_WD_i(SliderW*, void*);
  static void cb_shar_WD(SliderW*, void*);
public:
  SliderW *shar_intl;
private:
  void cb_shar_intl_i(SliderW*, void*);
  static void cb_shar_intl(SliderW*, void*);
public:
  SliderW *shar_chl;
private:
  void cb_shar_chl_i(SliderW*, void*);
  static void cb_shar_chl(SliderW*, void*);
public:
  SliderW *shar_ganl;
private:
  void cb_shar_ganl_i(SliderW*, void*);
  static void cb_shar_ganl(SliderW*, void*);
public:
  SliderW *shar_intr;
private:
  void cb_shar_intr_i(SliderW*, void*);
  static void cb_shar_intr(SliderW*, void*);
public:
  SliderW *shar_chr;
private:
  void cb_shar_chr_i(SliderW*, void*);
  static void cb_shar_chr(SliderW*, void*);
public:
  SliderW *shar_ganr;
private:
  void cb_shar_ganr_i(SliderW*, void*);
  static void cb_shar_ganr(SliderW*, void*);
public:
  SliderW *shar_lrc;
private:
  void cb_shar_lrc_i(SliderW*, void*);
  static void cb_shar_lrc(SliderW*, void*);
public:
  Fl_Check_Button *shar_MIDI;
private:
  void cb_shar_MIDI_i(Fl_Check_Button*, void*);
  static void cb_shar_MIDI(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *shar_SELECT;
private:
  void cb_shar_SELECT_i(Fl_Check_Button*, void*);
  static void cb_shar_SELECT(Fl_Check_Button*, void*);
public:
  Fl_Box *shar_chordname;
  SliderW *shar_note;
private:
  void cb_shar_note_i(SliderW*, void*);
  static void cb_shar_note(SliderW*, void*);
public:
  SliderW *shar_type;
private:
  void cb_shar_type_i(SliderW*, void*);
  static void cb_shar_type(SliderW*, void*);
public:
  Fl_Group *COMPBAND;
  Fl_Light_Button *cband_activar;
private:
  void cb_cband_activar_i(Fl_Light_Button*, void*);
  static void cb_cband_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *cband_preset;
private:
  void cb_cband_preset_i(Fl_Choice*, void*);
  static void cb_cband_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_cband_preset[];
public:
  SliderW *cband_WD;
private:
  void cb_cband_WD_i(SliderW*, void*);
  static void cb_cband_WD(SliderW*, void*);
public:
  SliderW *cband_gain;
private:
  void cb_cband_gain_i(SliderW*, void*);
  static void cb_cband_gain(SliderW*, void*);
public:
  SliderW *cband_Lratio;
private:
  void cb_cband_Lratio_i(SliderW*, void*);
  static void cb_cband_Lratio(SliderW*, void*);
public:
  SliderW *cband_MLratio;
private:
  void cb_cband_MLratio_i(SliderW*, void*);
  static void cb_cband_MLratio(SliderW*, void*);
public:
  SliderW *cband_MHratio;
private:
  void cb_cband_MHratio_i(SliderW*, void*);
  static void cb_cband_MHratio(SliderW*, void*);
public:
  SliderW *cband_Hratio;
private:
  void cb_cband_Hratio_i(SliderW*, void*);
  static void cb_cband_Hratio(SliderW*, void*);
public:
  SliderW *cband_Lthres;
private:
  void cb_cband_Lthres_i(SliderW*, void*);
  static void cb_cband_Lthres(SliderW*, void*);
public:
  SliderW *cband_MLthres;
private:
  void cb_cband_MLthres_i(SliderW*, void*);
  static void cb_cband_MLthres(SliderW*, void*);
public:
  SliderW *cband_MHthres;
private:
  void cb_cband_MHthres_i(SliderW*, void*);
  static void cb_cband_MHthres(SliderW*, void*);
public:
  SliderW *cband_Hthres;
private:
  void cb_cband_Hthres_i(SliderW*, void*);
  static void cb_cband_Hthres(SliderW*, void*);
public:
  SliderW *cband_cross1;
private:
  void cb_cband_cross1_i(SliderW*, void*);
  static void cb_cband_cross1(SliderW*, void*);
public:
  SliderW *cband_cross2;
private:
  void cb_cband_cross2_i(SliderW*, void*);
  static void cb_cband_cross2(SliderW*, void*);
public:
  SliderW *cband_cross3;
private:
  void cb_cband_cross3_i(SliderW*, void*);
  static void cb_cband_cross3(SliderW*, void*);
public:
  Fl_Group *OTREM;
  Fl_Light_Button *otrem_activar;
private:
  void cb_otrem_activar_i(Fl_Light_Button*, void*);
  static void cb_otrem_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *otrem_preset;
private:
  void cb_otrem_preset_i(Fl_Choice*, void*);
  static void cb_otrem_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_otrem_preset[];
public:
  SliderW *otrem_dpth;
private:
  void cb_otrem_dpth_i(SliderW*, void*);
  static void cb_otrem_dpth(SliderW*, void*);
public:
  SliderW *otrem_freq;
private:
  void cb_otrem_freq_i(SliderW*, void*);
  static void cb_otrem_freq(SliderW*, void*);
public:
  SliderW *otrem_rnd;
private:
  void cb_otrem_rnd_i(SliderW*, void*);
  static void cb_otrem_rnd(SliderW*, void*);
public:
  Fl_Choice *otrem_lfotype;
private:
  void cb_otrem_lfotype_i(Fl_Choice*, void*);
  static void cb_otrem_lfotype(Fl_Choice*, void*);
public:
  SliderW *otrem_stdf;
private:
  void cb_otrem_stdf_i(SliderW*, void*);
  static void cb_otrem_stdf(SliderW*, void*);
public:
  SliderW *otrem_pan;
private:
  void cb_otrem_pan_i(SliderW*, void*);
  static void cb_otrem_pan(SliderW*, void*);
public:
  Fl_Check_Button *otrem_invert;
private:
  void cb_otrem_invert_i(Fl_Check_Button*, void*);
  static void cb_otrem_invert(Fl_Check_Button*, void*);
public:
  Fl_Group *VIBE;
  Fl_Light_Button *vibe_activar;
private:
  void cb_vibe_activar_i(Fl_Light_Button*, void*);
  static void cb_vibe_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *vibe_preset;
private:
  void cb_vibe_preset_i(Fl_Choice*, void*);
  static void cb_vibe_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_vibe_preset[];
public:
  SliderW *vibe_WD;
private:
  void cb_vibe_WD_i(SliderW*, void*);
  static void cb_vibe_WD(SliderW*, void*);
public:
  SliderW *vibe_width;
private:
  void cb_vibe_width_i(SliderW*, void*);
  static void cb_vibe_width(SliderW*, void*);
public:
  SliderW *vibe_dpth;
private:
  void cb_vibe_dpth_i(SliderW*, void*);
  static void cb_vibe_dpth(SliderW*, void*);
public:
  SliderW *vibe_freq;
private:
  void cb_vibe_freq_i(SliderW*, void*);
  static void cb_vibe_freq(SliderW*, void*);
public:
  SliderW *vibe_rnd;
private:
  void cb_vibe_rnd_i(SliderW*, void*);
  static void cb_vibe_rnd(SliderW*, void*);
public:
  Fl_Choice *vibe_lfotype;
private:
  void cb_vibe_lfotype_i(Fl_Choice*, void*);
  static void cb_vibe_lfotype(Fl_Choice*, void*);
public:
  SliderW *vibe_stdf;
private:
  void cb_vibe_stdf_i(SliderW*, void*);
  static void cb_vibe_stdf(SliderW*, void*);
public:
  SliderW *vibe_fb;
private:
  void cb_vibe_fb_i(SliderW*, void*);
  static void cb_vibe_fb(SliderW*, void*);
public:
  SliderW *vibe_LR;
private:
  void cb_vibe_LR_i(SliderW*, void*);
  static void cb_vibe_LR(SliderW*, void*);
public:
  SliderW *vibe_pan;
private:
  void cb_vibe_pan_i(SliderW*, void*);
  static void cb_vibe_pan(SliderW*, void*);
public:
  Fl_Check_Button *vibe_stereo;
private:
  void cb_vibe_stereo_i(Fl_Check_Button*, void*);
  static void cb_vibe_stereo(Fl_Check_Button*, void*);
public:
  Fl_Group *INFINIT;
  Fl_Light_Button *infinity_activar;
private:
  void cb_infinity_activar_i(Fl_Light_Button*, void*);
  static void cb_infinity_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *infinity_preset;
private:
  void cb_infinity_preset_i(Fl_Choice*, void*);
  static void cb_infinity_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_infinity_preset[];
public:
  SliderW *infinity_WD;
private:
  void cb_infinity_WD_i(SliderW*, void*);
  static void cb_infinity_WD(SliderW*, void*);
public:
  SliderW *infinity_Q;
private:
  void cb_infinity_Q_i(SliderW*, void*);
  static void cb_infinity_Q(SliderW*, void*);
public:
  Fl_Value_Input *infinity_1;
private:
  void cb_infinity_1_i(Fl_Value_Input*, void*);
  static void cb_infinity_1(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_2;
private:
  void cb_infinity_2_i(Fl_Value_Input*, void*);
  static void cb_infinity_2(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_3;
private:
  void cb_infinity_3_i(Fl_Value_Input*, void*);
  static void cb_infinity_3(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_4;
private:
  void cb_infinity_4_i(Fl_Value_Input*, void*);
  static void cb_infinity_4(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_5;
private:
  void cb_infinity_5_i(Fl_Value_Input*, void*);
  static void cb_infinity_5(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_6;
private:
  void cb_infinity_6_i(Fl_Value_Input*, void*);
  static void cb_infinity_6(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_7;
private:
  void cb_infinity_7_i(Fl_Value_Input*, void*);
  static void cb_infinity_7(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_8;
private:
  void cb_infinity_8_i(Fl_Value_Input*, void*);
  static void cb_infinity_8(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *infinity_rev;
private:
  void cb_infinity_rev_i(Fl_Check_Button*, void*);
  static void cb_infinity_rev(Fl_Check_Button*, void*);
public:
  Fl_Counter *infinity_stages;
private:
  void cb_infinity_stages_i(Fl_Counter*, void*);
  static void cb_infinity_stages(Fl_Counter*, void*);
public:
  SliderW *infinity_pan;
private:
  void cb_infinity_pan_i(SliderW*, void*);
  static void cb_infinity_pan(SliderW*, void*);
public:
  SliderW *infinity_stdf;
private:
  void cb_infinity_stdf_i(SliderW*, void*);
  static void cb_infinity_stdf(SliderW*, void*);
public:
  SliderW *infinity_start;
private:
  void cb_infinity_start_i(SliderW*, void*);
  static void cb_infinity_start(SliderW*, void*);
public:
  SliderW *infinity_end;
private:
  void cb_infinity_end_i(SliderW*, void*);
  static void cb_infinity_end(SliderW*, void*);
public:
  SliderW *infinity_rate;
private:
  void cb_infinity_rate_i(SliderW*, void*);
  static void cb_infinity_rate(SliderW*, void*);
public:
  SliderW *infinity_subdiv;
private:
  void cb_infinity_subdiv_i(SliderW*, void*);
  static void cb_infinity_subdiv(SliderW*, void*);
public:
  Fl_Group *Tuner;
  Fl_Light_Button *tuner_activar;
private:
  void cb_tuner_activar_i(Fl_Light_Button*, void*);
  static void cb_tuner_activar(Fl_Light_Button*, void*);
public:
  TunerLed *tuner_bar;
  Fl_Box *WNote;
  Fl_Box *WRfreq;
  Fl_Box *WNfreq;
  Fl_Box *PINCHO;
  Fl_Box *TUNER_LABEL;
  Fl_Group *InOut;
  Fl_Light_Button *ActivarGeneral;
private:
  void cb_ActivarGeneral_i(Fl_Light_Button*, void*);
  static void cb_ActivarGeneral(Fl_Light_Button*, void*);
public:
  Fl_Button *BostBut;
private:
  void cb_BostBut_i(Fl_Button*, void*);
  static void cb_BostBut(Fl_Button*, void*);
public:
  SliderW *Balance;
private:
  void cb_Balance_i(SliderW*, void*);
  static void cb_Balance(SliderW*, void*);
public:
  SliderW *Nivel_Entrada;
private:
  void cb_Nivel_Entrada_i(SliderW*, void*);
  static void cb_Nivel_Entrada(SliderW*, void*);
public:
  SliderW *Nivel_Salida;
private:
  void cb_Nivel_Salida_i(SliderW*, void*);
  static void cb_Nivel_Salida(SliderW*, void*);
public:
  NewVum *input_vul;
  NewVum *input_vur;
  NewVum *output_vul;
  NewVum *output_vur;
  Fl_Box *LABEL_IO;
  Fl_Group *Midi;
  Fl_Light_Button *nidi_activar;
private:
  void cb_nidi_activar_i(Fl_Light_Button*, void*);
  static void cb_nidi_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *MIDIOctave;
private:
  void cb_MIDIOctave_i(Fl_Choice*, void*);
  static void cb_MIDIOctave(Fl_Choice*, void*);
  static Fl_Menu_Item menu_MIDIOctave[];
public:
  Fl_Counter *Midi_out_Counter;
private:
  void cb_Midi_out_Counter_i(Fl_Counter*, void*);
  static void cb_Midi_out_Counter(Fl_Counter*, void*);
public:
  SliderW *Trig_Adj;
private:
  void cb_Trig_Adj_i(SliderW*, void*);
  static void cb_Trig_Adj(SliderW*, void*);
public:
  SliderW *Vel_Adj;
private:
  void cb_Vel_Adj_i(SliderW*, void*);
  static void cb_Vel_Adj(SliderW*, void*);
public:
  Fl_Box *Mled;
  Fl_Box *MIDI_LABEL;
private:
  void cb_MIDI_LABEL_i(Fl_Box*, void*);
  static void cb_MIDI_LABEL(Fl_Box*, void*);
public:
  Fl_Group *Metro;
  Fl_Light_Button *metro_activar;
private:
  void cb_metro_activar_i(Fl_Light_Button*, void*);
  static void cb_metro_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *MetroBar;
private:
  void cb_MetroBar_i(Fl_Choice*, void*);
  static void cb_MetroBar(Fl_Choice*, void*);
public:
  SliderW *Metro_Volume;
private:
  void cb_Metro_Volume_i(SliderW*, void*);
  static void cb_Metro_Volume(SliderW*, void*);
public:
  Fl_Choice *MetroSound;
private:
  void cb_MetroSound_i(Fl_Choice*, void*);
  static void cb_MetroSound(Fl_Choice*, void*);
public:
  SliderW *Metro_Tempo;
private:
  void cb_Metro_Tempo_i(SliderW*, void*);
  static void cb_Metro_Tempo(SliderW*, void*);
public:
  Fl_Box *Metro_Led;
  Fl_Box *Metro_Label;
  Fl_Group *Presets;
  Fl_Box *PRESETS_LABEL;
  Fl_Button *L_B1;
private:
  void cb_L_B1_i(Fl_Button*, void*);
  static void cb_L_B1(Fl_Button*, void*);
public:
  Fl_Button *L_B2;
private:
  void cb_L_B2_i(Fl_Button*, void*);
  static void cb_L_B2(Fl_Button*, void*);
public:
  Fl_Button *L_B3;
private:
  void cb_L_B3_i(Fl_Button*, void*);
  static void cb_L_B3(Fl_Button*, void*);
public:
  Fl_Button *L_B4;
private:
  void cb_L_B4_i(Fl_Button*, void*);
  static void cb_L_B4(Fl_Button*, void*);
public:
  Fl_Button *S_new;
private:
  void cb_S_new_i(Fl_Button*, void*);
  static void cb_S_new(Fl_Button*, void*);
public:
  Fl_Button *L_preset;
private:
  void cb_L_preset_i(Fl_Button*, void*);
  static void cb_L_preset(Fl_Button*, void*);
public:
  Fl_Button *S_preset;
private:
  void cb_S_preset_i(Fl_Button*, void*);
  static void cb_S_preset(Fl_Button*, void*);
public:
  Fl_Light_Button *Compare;
private:
  void cb_Compare_i(Fl_Light_Button*, void*);
  static void cb_Compare(Fl_Light_Button*, void*);
public:
  Fl_Button *B_preset;
private:
  void cb_B_preset_i(Fl_Button*, void*);
  static void cb_B_preset(Fl_Button*, void*);
public:
  Fl_Input *WPreset_Name;
private:
  void cb_WPreset_Name_i(Fl_Input*, void*);
  static void cb_WPreset_Name(Fl_Input*, void*);
public:
  Fl_Counter *Preset_Counter;
private:
  void cb_Preset_Counter_i(Fl_Counter*, void*);
  static void cb_Preset_Counter(Fl_Counter*, void*);
public:
  Fl_Box *DAuthor;
  Fl_Button *RandomP;
private:
  void cb_RandomP_i(Fl_Button*, void*);
  static void cb_RandomP(Fl_Button*, void*);
public:
  Fl_Button *Open_Order;
private:
  void cb_Open_Order_i(Fl_Button*, void*);
  static void cb_Open_Order(Fl_Button*, void*);
public:
  Fl_Button *Etit;
private:
  void cb_Etit_i(Fl_Button*, void*);
  static void cb_Etit(Fl_Button*, void*);
public:
  Analyzer *Analy;
  Fl_Button *HideUE;
private:
  void cb_HideUE_i(Fl_Button*, void*);
  static void cb_HideUE(Fl_Button*, void*);
public:
  Fl_Button *SwitchMod;
private:
  void cb_SwitchMod_i(Fl_Button*, void*);
  static void cb_SwitchMod(Fl_Button*, void*);
public:
  Fl_Group *Tap;
  Fl_Light_Button *Tap_activar;
private:
  void cb_Tap_activar_i(Fl_Light_Button*, void*);
  static void cb_Tap_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *T_SEL;
private:
  void cb_T_SEL_i(Fl_Choice*, void*);
  static void cb_T_SEL(Fl_Choice*, void*);
  static Fl_Menu_Item menu_T_SEL[];
public:
  Fl_Choice *T_SET;
private:
  void cb_T_SET_i(Fl_Choice*, void*);
  static void cb_T_SET(Fl_Choice*, void*);
  static Fl_Menu_Item menu_T_SET[];
public:
  Fl_Button *T_Apply;
private:
  void cb_T_Apply_i(Fl_Button*, void*);
  static void cb_T_Apply(Fl_Button*, void*);
public:
  Fl_Button *T_BUT;
private:
  void cb_T_BUT_i(Fl_Button*, void*);
  static void cb_T_BUT(Fl_Button*, void*);
public:
  Fl_Box *TAP_LABEL;
  Fl_Value_Input *T_DIS;
private:
  void cb_T_DIS_i(Fl_Value_Input*, void*);
  static void cb_T_DIS(Fl_Value_Input*, void*);
public:
  Fl_Double_Window *BankWindow;
private:
  void cb_BankWindow_i(Fl_Double_Window*, void*);
  static void cb_BankWindow(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo3;
  Fl_Menu_Bar *MenuB;
  static Fl_Menu_Item menu_MenuB[];
  static Fl_Menu_Item *ArchivoB;
  static Fl_Menu_Item *NewB;
private:
  void cb_NewB_i(Fl_Menu_*, void*);
  static void cb_NewB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Bank;
private:
  void cb_Load_Bank_i(Fl_Menu_*, void*);
  static void cb_Load_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Bank;
private:
  void cb_Save_Bank_i(Fl_Menu_*, void*);
  static void cb_Save_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Convert_Old_Bank;
private:
  void cb_Convert_Old_Bank_i(Fl_Menu_*, void*);
  static void cb_Convert_Old_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *salirB;
private:
  void cb_salirB_i(Fl_Menu_*, void*);
  static void cb_salirB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AyudaB;
  static Fl_Menu_Item *ContenidoB;
private:
  void cb_ContenidoB_i(Fl_Menu_*, void*);
  static void cb_ContenidoB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Acerca_deB;
private:
  void cb_Acerca_deB_i(Fl_Menu_*, void*);
  static void cb_Acerca_deB(Fl_Menu_*, void*);
public:
  Fl_Button *B_B1;
private:
  void cb_B_B1_i(Fl_Button*, void*);
  static void cb_B_B1(Fl_Button*, void*);
public:
  Fl_Button *B_B2;
private:
  void cb_B_B2_i(Fl_Button*, void*);
  static void cb_B_B2(Fl_Button*, void*);
public:
  Fl_Button *B_B3;
private:
  void cb_B_B3_i(Fl_Button*, void*);
  static void cb_B_B3(Fl_Button*, void*);
public:
  Fl_Button *B_B4;
private:
  void cb_B_B4_i(Fl_Button*, void*);
  static void cb_B_B4(Fl_Button*, void*);
public:
  Fl_Choice *CH_UB;
private:
  void cb_CH_UB_i(Fl_Choice*, void*);
  static void cb_CH_UB(Fl_Choice*, void*);
public:
  Fl_Group *ob;
  Fl_Double_Window *Order;
private:
  void cb_Order_i(Fl_Double_Window*, void*);
  static void cb_Order(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo1;
  Fl_Box *O_TITLE;
  Fl_Browser *Avail_Bro;
  Fl_Button *Pon;
private:
  void cb_Pon_i(Fl_Button*, void*);
  static void cb_Pon(Fl_Button*, void*);
public:
  Fl_Browser *Order_Bro;
  Fl_Button *Sube;
private:
  void cb_Sube_i(Fl_Button*, void*);
  static void cb_Sube(Fl_Button*, void*);
public:
  Fl_Button *Baja;
private:
  void cb_Baja_i(Fl_Button*, void*);
  static void cb_Baja(Fl_Button*, void*);
public:
  Fl_Group *Filters;
  Fl_Button *Fil0;
private:
  void cb_Fil0_i(Fl_Button*, void*);
  static void cb_Fil0(Fl_Button*, void*);
public:
  Fl_Button *Fil1;
private:
  void cb_Fil1_i(Fl_Button*, void*);
  static void cb_Fil1(Fl_Button*, void*);
public:
  Fl_Button *Fil2;
private:
  void cb_Fil2_i(Fl_Button*, void*);
  static void cb_Fil2(Fl_Button*, void*);
public:
  Fl_Button *Fil4;
private:
  void cb_Fil4_i(Fl_Button*, void*);
  static void cb_Fil4(Fl_Button*, void*);
public:
  Fl_Button *Fil8;
private:
  void cb_Fil8_i(Fl_Button*, void*);
  static void cb_Fil8(Fl_Button*, void*);
public:
  Fl_Button *Fil16;
private:
  void cb_Fil16_i(Fl_Button*, void*);
  static void cb_Fil16(Fl_Button*, void*);
public:
  Fl_Button *Fil32;
private:
  void cb_Fil32_i(Fl_Button*, void*);
  static void cb_Fil32(Fl_Button*, void*);
public:
  Fl_Button *Fil64;
private:
  void cb_Fil64_i(Fl_Button*, void*);
  static void cb_Fil64(Fl_Button*, void*);
public:
  Fl_Button *Fil128;
private:
  void cb_Fil128_i(Fl_Button*, void*);
  static void cb_Fil128(Fl_Button*, void*);
public:
  Fl_Check_Button *Order_DeacHide;
private:
  void cb_Order_DeacHide_i(Fl_Check_Button*, void*);
  static void cb_Order_DeacHide(Fl_Check_Button*, void*);
public:
  Fl_Button *ok_order;
private:
  void cb_ok_order_i(Fl_Button*, void*);
  static void cb_ok_order(Fl_Button*, void*);
public:
  Fl_Button *Cancel_order;
private:
  void cb_Cancel_order_i(Fl_Button*, void*);
  static void cb_Cancel_order(Fl_Button*, void*);
public:
  Fl_Double_Window *Settings;
private:
  void cb_Settings_i(Fl_Double_Window*, void*);
  static void cb_Settings(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo2;
  Fl_Tabs *STabs;
  Fl_Group *Look;
  Fl_Box *Fondo6;
  Fl_Choice *scheme_ch;
private:
  void cb_scheme_ch_i(Fl_Choice*, void*);
  static void cb_scheme_ch(Fl_Choice*, void*);
  static Fl_Menu_Item menu_scheme_ch[];
public:
  Fl_Browser *Font_Bro;
private:
  void cb_Font_Bro_i(Fl_Browser*, void*);
  static void cb_Font_Bro(Fl_Browser*, void*);
public:
  Fl_Box *FSLabel;
  Fl_Button *FSless;
private:
  void cb_FSless_i(Fl_Button*, void*);
  static void cb_FSless(Fl_Button*, void*);
public:
  Fl_Button *FSplus;
private:
  void cb_FSplus_i(Fl_Button*, void*);
  static void cb_FSplus(Fl_Button*, void*);
public:
  Fl_Button *FSReset;
private:
  void cb_FSReset_i(Fl_Button*, void*);
  static void cb_FSReset(Fl_Button*, void*);
public:
  Fl_Box *CLLabel;
  Fl_Button *B_C;
private:
  void cb_B_C_i(Fl_Button*, void*);
  static void cb_B_C(Fl_Button*, void*);
public:
  Fl_Button *A_C;
private:
  void cb_A_C_i(Fl_Button*, void*);
  static void cb_A_C(Fl_Button*, void*);
public:
  Fl_Button *L_C;
private:
  void cb_L_C_i(Fl_Button*, void*);
  static void cb_L_C(Fl_Button*, void*);
public:
  Fl_Button *K_C;
private:
  void cb_K_C_i(Fl_Button*, void*);
  static void cb_K_C(Fl_Button*, void*);
public:
  Fl_Check_Button *Enable_Back;
private:
  void cb_Enable_Back_i(Fl_Check_Button*, void*);
  static void cb_Enable_Back(Fl_Check_Button*, void*);
public:
  Fl_File_Input *BackFiname;
  Fl_Button *BI_Browser;
private:
  void cb_BI_Browser_i(Fl_Button*, void*);
  static void cb_BI_Browser(Fl_Button*, void*);
public:
  Fl_Check_Button *Enable_DeacHide;
private:
  void cb_Enable_DeacHide_i(Fl_Check_Button*, void*);
  static void cb_Enable_DeacHide(Fl_Check_Button*, void*);
public:
  Fl_Group *AUDIO_SET;
  Fl_Box *Fondo7;
  Fl_Check_Button *INSTATE;
private:
  void cb_INSTATE_i(Fl_Check_Button*, void*);
  static void cb_INSTATE(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Filter_DC;
private:
  void cb_Filter_DC_i(Fl_Check_Button*, void*);
  static void cb_Filter_DC(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Pre_Serve;
private:
  void cb_Pre_Serve_i(Fl_Check_Button*, void*);
  static void cb_Pre_Serve(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Update_TAP;
private:
  void cb_Update_TAP_i(Fl_Check_Button*, void*);
  static void cb_Update_TAP(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *UPSAMPLE_C;
private:
  void cb_UPSAMPLE_C_i(Fl_Check_Button*, void*);
  static void cb_UPSAMPLE_C(Fl_Check_Button*, void*);
public:
  Fl_Choice *Upr_Amo;
private:
  void cb_Upr_Amo_i(Fl_Choice*, void*);
  static void cb_Upr_Amo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Upr_Amo[];
public:
  Fl_Choice *Upr_Qual;
private:
  void cb_Upr_Qual_i(Fl_Choice*, void*);
  static void cb_Upr_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Upr_Qual[];
public:
  Fl_Choice *Downr_Qual;
private:
  void cb_Downr_Qual_i(Fl_Choice*, void*);
  static void cb_Downr_Qual(Fl_Choice*, void*);
public:
  Fl_Counter *L_SIZE;
private:
  void cb_L_SIZE_i(Fl_Counter*, void*);
  static void cb_L_SIZE(Fl_Counter*, void*);
public:
  Fl_Counter *LM_Volume;
private:
  void cb_LM_Volume_i(Fl_Counter*, void*);
  static void cb_LM_Volume(Fl_Counter*, void*);
public:
  Fl_Choice *Har_Qual;
private:
  void cb_Har_Qual_i(Fl_Choice*, void*);
  static void cb_Har_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Har_Qual[];
public:
  Fl_Choice *Ste_Qual;
private:
  void cb_Ste_Qual_i(Fl_Choice*, void*);
  static void cb_Ste_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Ste_Qual[];
public:
  Fl_Choice *Voc_Bands;
private:
  void cb_Voc_Bands_i(Fl_Choice*, void*);
  static void cb_Voc_Bands(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Voc_Bands[];
public:
  Fl_Check_Button *FLPosition;
private:
  void cb_FLPosition_i(Fl_Check_Button*, void*);
  static void cb_FLPosition(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *DB6B;
private:
  void cb_DB6B_i(Fl_Check_Button*, void*);
  static void cb_DB6B(Fl_Check_Button*, void*);
public:
  Fl_Counter *Calibration;
private:
  void cb_Calibration_i(Fl_Counter*, void*);
  static void cb_Calibration(Fl_Counter*, void*);
public:
  Fl_Counter *RTrigger;
private:
  void cb_RTrigger_i(Fl_Counter*, void*);
  static void cb_RTrigger(Fl_Counter*, void*);
public:
  Fl_Choice *RC_Opti;
private:
  void cb_RC_Opti_i(Fl_Choice*, void*);
  static void cb_RC_Opti(Fl_Choice*, void*);
  static Fl_Menu_Item menu_RC_Opti[];
public:
  Fl_Choice *Har_Downsample;
private:
  void cb_Har_Downsample_i(Fl_Choice*, void*);
  static void cb_Har_Downsample(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Har_Downsample[];
public:
  Fl_Choice *Har_Down_Qua;
private:
  void cb_Har_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Har_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Har_Up_Qua;
private:
  void cb_Har_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Har_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Rev_Downsample;
private:
  void cb_Rev_Downsample_i(Fl_Choice*, void*);
  static void cb_Rev_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Rev_Down_Qua;
private:
  void cb_Rev_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Rev_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Rev_Up_Qua;
private:
  void cb_Rev_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Rev_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Con_Downsample;
private:
  void cb_Con_Downsample_i(Fl_Choice*, void*);
  static void cb_Con_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Con_Down_Qua;
private:
  void cb_Con_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Con_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Con_Up_Qua;
private:
  void cb_Con_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Con_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Seq_Downsample;
private:
  void cb_Seq_Downsample_i(Fl_Choice*, void*);
  static void cb_Seq_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Seq_Down_Qua;
private:
  void cb_Seq_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Seq_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Seq_Up_Qua;
private:
  void cb_Seq_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Seq_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Shi_Downsample;
private:
  void cb_Shi_Downsample_i(Fl_Choice*, void*);
  static void cb_Shi_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Shi_Down_Qua;
private:
  void cb_Shi_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Shi_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Shi_Up_Qua;
private:
  void cb_Shi_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Shi_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Voc_Downsample;
private:
  void cb_Voc_Downsample_i(Fl_Choice*, void*);
  static void cb_Voc_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Voc_Down_Qua;
private:
  void cb_Voc_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Voc_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Voc_Up_Qua;
private:
  void cb_Voc_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Voc_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Ste_Downsample;
private:
  void cb_Ste_Downsample_i(Fl_Choice*, void*);
  static void cb_Ste_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Ste_Down_Qua;
private:
  void cb_Ste_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Ste_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Ste_Up_Qua;
private:
  void cb_Ste_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Ste_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Wave_Amo;
private:
  void cb_Wave_Amo_i(Fl_Choice*, void*);
  static void cb_Wave_Amo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Wave_Amo[];
public:
  Fl_Choice *Wave_Down_Qua;
private:
  void cb_Wave_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Wave_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Wave_Up_Qua;
private:
  void cb_Wave_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Wave_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Group *MIDI_SET;
  Fl_Box *Fondo8;
  Fl_Check_Button *D_A_Connect;
private:
  void cb_D_A_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_A_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *BMidiIn;
private:
  void cb_BMidiIn_i(Fl_Browser*, void*);
  static void cb_BMidiIn(Fl_Browser*, void*);
public:
  Fl_Counter *Midi_In_Counter;
private:
  void cb_Midi_In_Counter_i(Fl_Counter*, void*);
  static void cb_Midi_In_Counter(Fl_Counter*, void*);
public:
  Fl_Counter *Har_In_Counter;
private:
  void cb_Har_In_Counter_i(Fl_Counter*, void*);
  static void cb_Har_In_Counter(Fl_Counter*, void*);
public:
  Fl_Group *wMIDI;
  Fl_Check_Button *Mw0;
private:
  void cb_Mw0_i(Fl_Check_Button*, void*);
  static void cb_Mw0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Mw1;
private:
  void cb_Mw1_i(Fl_Check_Button*, void*);
  static void cb_Mw1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *AAssign;
private:
  void cb_AAssign_i(Fl_Check_Button*, void*);
  static void cb_AAssign(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *MTable;
private:
  void cb_MTable_i(Fl_Check_Button*, void*);
  static void cb_MTable(Fl_Check_Button*, void*);
public:
  Fl_Scroll *scroll;
  Fl_Group *JACK_SET;
  Fl_Box *Fondo9;
  Fl_Check_Button *D_J_Connect;
private:
  void cb_D_J_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_J_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *JackCo;
  Fl_Check_Button *D_IJ_Connect;
private:
  void cb_D_IJ_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_IJ_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *JackIn;
  Fl_Group *MISC_SET;
  Fl_Box *Fondo10;
  Fl_Input *Username;
private:
  void cb_Username_i(Fl_Input*, void*);
  static void cb_Username(Fl_Input*, void*);
public:
  Fl_Check_Button *MES_DIS;
private:
  void cb_MES_DIS_i(Fl_Check_Button*, void*);
  static void cb_MES_DIS(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *T_TIMEOUT;
private:
  void cb_T_TIMEOUT_i(Fl_Check_Button*, void*);
  static void cb_T_TIMEOUT(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ENA_TOOL;
private:
  void cb_ENA_TOOL_i(Fl_Check_Button*, void*);
  static void cb_ENA_TOOL(Fl_Check_Button*, void*);
public:
  Fl_Group *BANK_SET;
  Fl_Box *Fondo11;
  Fl_File_Input *BFiname;
  Fl_Button *BF_Browser;
private:
  void cb_BF_Browser_i(Fl_Button*, void*);
  static void cb_BF_Browser(Fl_Button*, void*);
public:
  Fl_File_Input *Udir;
  Fl_Button *UD_Browser;
private:
  void cb_UD_Browser_i(Fl_Button*, void*);
  static void cb_UD_Browser(Fl_Button*, void*);
public:
  Fl_Double_Window *MIDILearn;
private:
  void cb_MIDILearn_i(Fl_Double_Window*, void*);
  static void cb_MIDILearn(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo4;
  Fl_Browser *Epar;
private:
  void cb_Epar_i(Fl_Browser*, void*);
  static void cb_Epar(Fl_Browser*, void*);
public:
  Fl_Button *GMM;
private:
  void cb_GMM_i(Fl_Button*, void*);
  static void cb_GMM(Fl_Button*, void*);
public:
  Fl_Browser *TPresets;
  Fl_Button *CopyF;
private:
  void cb_CopyF_i(Fl_Button*, void*);
  static void cb_CopyF(Fl_Button*, void*);
public:
  Fl_Button *CopyT;
private:
  void cb_CopyT_i(Fl_Button*, void*);
  static void cb_CopyT(Fl_Button*, void*);
public:
  Fl_Group *Ares;
  Fl_Box *Ar1;
  Fl_Box *Ar2;
  Fl_Box *Ar3;
  Fl_Box *Ar4;
  Fl_Box *Ar5;
  Fl_Box *Ar6;
  Fl_Box *Ar7;
  Fl_Box *Ar8;
  Fl_Box *Ar9;
  Fl_Box *Ar10;
  Fl_Box *Ar11;
  Fl_Box *Ar12;
  Fl_Box *Ar13;
  Fl_Box *Ar14;
  Fl_Box *Ar15;
  Fl_Box *Ar16;
  Fl_Box *Ar17;
  Fl_Box *Ar18;
  Fl_Box *Ar19;
  Fl_Box *Ar20;
  Fl_Button *ClearA;
private:
  void cb_ClearA_i(Fl_Button*, void*);
  static void cb_ClearA(Fl_Button*, void*);
public:
  Fl_Button *ClearP;
private:
  void cb_ClearP_i(Fl_Button*, void*);
  static void cb_ClearP(Fl_Button*, void*);
public:
  Fl_Button *Assign;
private:
  void cb_Assign_i(Fl_Button*, void*);
  static void cb_Assign(Fl_Button*, void*);
public:
  Fl_Button *AssignA;
private:
  void cb_AssignA_i(Fl_Button*, void*);
  static void cb_AssignA(Fl_Button*, void*);
public:
  Fl_Button *CancelRec;
private:
  void cb_CancelRec_i(Fl_Button*, void*);
  static void cb_CancelRec(Fl_Button*, void*);
public:
  Fl_Value_Input *Disp_Control;
private:
  void cb_Disp_Control_i(Fl_Value_Input*, void*);
  static void cb_Disp_Control(Fl_Value_Input*, void*);
public:
  Fl_Button *CopyTAll;
private:
  void cb_CopyTAll_i(Fl_Button*, void*);
  static void cb_CopyTAll(Fl_Button*, void*);
public:
  Fl_Button *CloseML;
private:
  void cb_CloseML_i(Fl_Button*, void*);
  static void cb_CloseML(Fl_Button*, void*);
public:
  Fl_Group *Filters_ML;
  Fl_Button *M_fil_all;
private:
  void cb_M_fil_all_i(Fl_Button*, void*);
  static void cb_M_fil_all(Fl_Button*, void*);
public:
  Fl_Button *M_fil_current;
private:
  void cb_M_fil_current_i(Fl_Button*, void*);
  static void cb_M_fil_current(Fl_Button*, void*);
public:
  Fl_Double_Window *AboutWin;
private:
  void cb_AboutWin_i(Fl_Double_Window*, void*);
  static void cb_AboutWin(Fl_Double_Window*, void*);
public:
  Fl_Box *AB_Title;
  Fl_Box *AB_SubTitle;
  Fl_Box *About_Version;
  Fl_Box *AB_url;
  Fl_Box *AB_Authors;
  Fl_Box *AB_A1;
  Fl_Box *AB_A2;
  Fl_Box *AB_A3;
private:
  void cb_LICENSE_i(Fl_Button*, void*);
  static void cb_LICENSE(Fl_Button*, void*);
  void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Box *AB_A4;
  Fl_Double_Window *Trigger;
private:
  void cb_Trigger_i(Fl_Double_Window*, void*);
  static void cb_Trigger(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo5;
  Fl_Box *ACI_LABEL;
  NewVum *aux_vu;
  Fl_Choice *aux_source;
private:
  void cb_aux_source_i(Fl_Choice*, void*);
  static void cb_aux_source(Fl_Choice*, void*);
  static Fl_Menu_Item menu_aux_source[];
public:
  SliderW *aux_gain;
private:
  void cb_aux_gain_i(SliderW*, void*);
  static void cb_aux_gain(SliderW*, void*);
public:
  SliderW *aux_thres;
private:
  void cb_aux_thres_i(SliderW*, void*);
  static void cb_aux_thres(SliderW*, void*);
public:
  Fl_Value_Input *aux_midi;
private:
  void cb_aux_midi_i(Fl_Value_Input*, void*);
  static void cb_aux_midi(Fl_Value_Input*, void*);
public:
  SliderW *aux_min;
private:
  void cb_aux_min_i(SliderW*, void*);
  static void cb_aux_min(SliderW*, void*);
public:
  SliderW *aux_max;
private:
  void cb_aux_max_i(SliderW*, void*);
  static void cb_aux_max(SliderW*, void*);
public:
  RKRGUI(int argc, char**argv,RKR *rkr_);
  void Background_Color_Change(Fl_Color bcolor);
  void Label_Color_Change(Fl_Color bcolor);
  void Buttons_Color_Change(Fl_Color bcolor);
  void Leds_Color_Change(Fl_Color bcolor);
  void put_icon(Fl_Window* window);
  void load_stat();
  void save_stat(int whati);
  void Put_Loaded();
  static void tick(void* v);
  static void preset_click(Fl_Button* o, void* v);
  inline void preset_click_i(Fl_Button* o, void*);
  void make_window_banks();
  void reordena();
  void show_help();
  void show_lic();
  void MiraClientes();
  void MiraConfig();
  void BankWin_Label(char *filename);
  void is_modified();
  void Put_Loaded_Bank();
  void Chord(int eff);
  void ActMIDI();
  void ActOnOff();
  void light_preset(int npreset);
  void unlight_preset(int npreset);
  void PutBackground();
  void chfsize(int value);
  void adjustfont();
  void ChangeActives();
  void findpos(int num, int value, Fl_Widget *w);
  void Put_Skin(int last);
  void FillML(int type);
  void DisAssigns();
  void Prepare_Order();
  void Show_Next_Time();
  void update_looper();
  void UpdateTGUI();
  void ActACI();
  int Busca_Eff(int num);
  void Fill_Avail(int filter);
  void highlight();
  int search_but(int x, int y);
  void ScanDir();
  static int prevnext(int e);
  void getMIDIControl(int num);
  void PrepareML();
  inline void addpreset(Fl_Widget *w, int num);
  void add_name(Fl_Widget *w, char *name);
  Fl_Widget * FindWidget(int num);
  void ReadIntPresets();
  inline void delpreset(Fl_Widget *w, int num);
  void Prep_Reorden(int source, int dest);
  void make_table_window();
  static void bank_click(Fl_Choice* o, void* v);
  inline void bank_click_i(Fl_Choice* o, void*);
  static void p_click(Fl_Choice* o, void* v);
  inline void p_click_i(Fl_Choice* o, void*);
  void fill_mptable(int num,int value);
  void mtfillvalue(int num,int value);
  void Put_MidiTable();
  void RandomPreset();
  void drag_effect();
  int AddBankName(const char *name);
  void ClearBankNames();
};
#endif
